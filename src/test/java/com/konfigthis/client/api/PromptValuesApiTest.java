/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import java.time.LocalDate;
import com.konfigthis.client.model.MULTIPLEINSTANCEMODELREFERENCE;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PromptValuesApi
 */
@Disabled
public class PromptValuesApiTest {

    private static PromptValuesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PromptValuesApi(apiClient);
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void availableLocationsTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.availableLocations()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignmentChangeGroupCostCentersTest() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getAssignmentChangeGroupCostCenters()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignmentTypesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getAssignmentTypes()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyInsiderTypesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getCompanyInsiderTypes()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContingentWorkerTypesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getContingentWorkerTypes()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrencyInstancesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getCurrencyInstances()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeTypesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getEmployeeTypes()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGiftInstancesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getGiftInstances()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrantsTest() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getGrants()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstancesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_0Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_0()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_1Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_1()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_10Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_10()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_11Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_11()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_12Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_12()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_13Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_13()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_14Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_14()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_15Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_15()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_16Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_16()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_17Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_17()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_18Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_18()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_19Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_19()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_2Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_2()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_3Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_3()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_4Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_4()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_5Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_5()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_6Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_6()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_7Test() throws ApiException {
        LocalDate effectiveDate = null;
        String event = null;
        Long limit = null;
        Long offset = null;
        String organizationType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_7()
                .effectiveDate(effectiveDate)
                .event(event)
                .limit(limit)
                .offset(offset)
                .organizationType(organizationType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_8Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_8()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_9Test() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_9()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOptionsTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getOptions()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProposedPositionsTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getProposedPositions()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupervisoryOrgValuesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getSupervisoryOrgValues()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeTypesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getTimeTypes()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkerTypesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getWorkerTypes()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceInstancesTest() throws ApiException {
        LocalDate effectiveDate = null;
        String job = null;
        Long limit = null;
        String location = null;
        Long offset = null;
        List<String> proposedManager = null;
        String staffingEvent = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getWorkspaceInstances()
                .effectiveDate(effectiveDate)
                .job(job)
                .limit(limit)
                .location(location)
                .offset(offset)
                .proposedManager(proposedManager)
                .staffingEvent(staffingEvent)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

}
