/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AssignmentType23929e1f68ca10000d6940d6bde56963;
import com.konfigthis.client.model.BusinessProcessParameters5afc0b4b5a4610002aaebb8180cd2261;
import com.konfigthis.client.model.ChangeJobAdditionalJobClassificationData27ec818d10d0100003600115b5200102;
import com.konfigthis.client.model.ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea;
import com.konfigthis.client.model.ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102;
import com.konfigthis.client.model.ChangeJobCompanyInsiderTypesData05d4c45042b61000131e4b2132f30137;
import com.konfigthis.client.model.ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107;
import com.konfigthis.client.model.ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7;
import com.konfigthis.client.model.ChangeJobJobClassificationData354103f196361000084489bcb281017f;
import com.konfigthis.client.model.ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115;
import com.konfigthis.client.model.ChangeJobLocation90151d6c4ff110001b4a46091678025c;
import com.konfigthis.client.model.ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146;
import com.konfigthis.client.model.ChangeJobOpeningData97af9049a5fd10001c4888d654170000;
import com.konfigthis.client.model.ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221;
import com.konfigthis.client.model.Comments7d98fd55aeee100022968e52a1b31c60;
import com.konfigthis.client.model.Currency2d0ca2cb2448100009c54386a8570e07;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.EventState54e611eca2c910000fbc4579181c0111;
import com.konfigthis.client.model.Frequency2d0ca2cb2448100009c5436d5d670e06;
import com.konfigthis.client.model.HeadcountOption97af9049a5fd10001c48896fbde30000;
import com.konfigthis.client.model.Job35b8f199c29410002508ffd7ad6101f3;
import com.konfigthis.client.model.JobChangesGetAdministrativeOptionsResponse;
import com.konfigthis.client.model.JobChangesGetBusinessTitleResponse;
import com.konfigthis.client.model.JobChangesGetCommentByIdResponse;
import com.konfigthis.client.model.JobChangesGetContractOptionsResponse;
import com.konfigthis.client.model.JobChangesGetJobClassificationResponse;
import com.konfigthis.client.model.JobChangesGetJobProfileResponse;
import com.konfigthis.client.model.JobChangesGetLocationInfoResponse;
import com.konfigthis.client.model.JobChangesGetMoveTeamOptionResponse;
import com.konfigthis.client.model.JobChangesGetOpeningOptionsResponse;
import com.konfigthis.client.model.JobChangesGetPositionByIdResponse;
import com.konfigthis.client.model.JobChangesGetStartDetailsResponse;
import com.konfigthis.client.model.JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020;
import com.konfigthis.client.model.JobProfile3db8095ffa18100013f019afc6d30116;
import com.konfigthis.client.model.JobRequisitionDfc4e58f730810001ad60325d9bc52cf;
import java.time.LocalDate;
import com.konfigthis.client.model.Location6da81665c26510001fc6b1d42fae5f7b;
import com.konfigthis.client.model.Location90151d6c4ff110001bfa027116820278;
import com.konfigthis.client.model.PayRateTypeD25283821c01100016756a14eb650000;
import com.konfigthis.client.model.PositionDfc4e58f730810001ad60369c23452d1;
import com.konfigthis.client.model.PositionWorkerType05d4c45042b610001030ee47f2c90118;
import com.konfigthis.client.model.PurchaseOrder2d0ca2cb2448100009c5433bcff60e05;
import com.konfigthis.client.model.Reason6da81665c26510001f34d0a154765e9b;
import com.konfigthis.client.model.Status54e611eca2c910000fbc4599be0b0112;
import com.konfigthis.client.model.SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8;
import com.konfigthis.client.model.Template2b1b95dfe4af100009f30dc769a31686;
import com.konfigthis.client.model.TimeType05d4c45042b610000bb540b7458e0108;
import com.konfigthis.client.model.WorkShift0ee7bb8b41db1000143d4e4822174f2e;
import com.konfigthis.client.model.WorkSpace0ee7bb8b41db10001e7db6a6c3e55663;
import com.konfigthis.client.model.WorkStudy05d4c45042b610000ba2f83c70f30101;
import com.konfigthis.client.model.Worker271bbd673582100010110b9f9a6d99e1;
import com.konfigthis.client.model.WorkersCompensationCodeOverride05d4c45042b61000138500e185e0013f;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobChangesApi
 */
@Disabled
public class JobChangesApiTest {

    private static JobChangesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new JobChangesApi(apiClient);
    }

    /**
     * Retrieves the administrative options for the specified job change ID.
     *
     * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdminOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea response = api.getAdminOptions(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the administrative options for the specified job change ID.
     *
     * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdministrativeOptionsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetAdministrativeOptionsResponse response = api.getAdministrativeOptions(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a business title for the specified job change ID.
     *
     * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessTitleTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 response = api.getBusinessTitle(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a business title for the specified job change ID.
     *
     * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessTitle_0Test() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetBusinessTitleResponse response = api.getBusinessTitle_0(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a single change job event instance.
     *
     * Retrieves a change job event with the specified ID.  Secured by: Change Job (Mass Action), Change Job (REST Service), Staffing Actions, Staffing Actions: Academic Pay, Staffing Actions: Additional Job Classifications, Staffing Actions: Administrator, Staffing Actions: Attachments, Staffing Actions: Business Title, Staffing Actions: Change Job Date and Reason, Staffing Actions: Compensation for All Job Profiles, Staffing Actions: Contract Details, Staffing Actions: Hire Student, Staffing Actions: Job Profile, Staffing Actions: View \\~Worker\\~ Start Date Correction  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String ID = null;
        ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7 response = api.getById(ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the comment information for the specified job change ID.
     *
     * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentByIdTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetCommentByIdResponse response = api.getCommentById(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the comment information for the specified job change ID.
     *
     * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentInfoTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Comments7d98fd55aeee100022968e52a1b31c60 response = api.getCommentInfo(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the contract options for the specified change job ID.
     *
     * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractOptionsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetContractOptionsResponse response = api.getContractOptions(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the contract options for the specified change job ID.
     *
     * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractOptions_0Test() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 response = api.getContractOptions_0(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a job classification for the specified job change ID.
     *
     * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobClassificationTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetJobClassificationResponse response = api.getJobClassification(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a job classification for the specified job change ID.
     *
     * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobClassification_0Test() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobJobClassificationData354103f196361000084489bcb281017f response = api.getJobClassification_0(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a job profile for the specified job change ID.
     *
     * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobProfileTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetJobProfileResponse response = api.getJobProfile(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the location information for the specified job change ID.
     *
     * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationInfoTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetLocationInfoResponse response = api.getLocationInfo(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the location information for the specified job change ID.
     *
     * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationInfo_0Test() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobLocation90151d6c4ff110001b4a46091678025c response = api.getLocationInfo_0(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a move team option from the specified job change ID.
     *
     * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager&#39;s Team  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMoveTeamOptionTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 response = api.getMoveTeamOption(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a move team option from the specified job change ID.
     *
     * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager&#39;s Team  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMoveTeamOption_0Test() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetMoveTeamOptionResponse response = api.getMoveTeamOption_0(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the opening options for the specified job change ID.
     *
     * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpeningOptionsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetOpeningOptionsResponse response = api.getOpeningOptions(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the opening options for the specified job change ID.
     *
     * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpeningOptions_0Test() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobOpeningData97af9049a5fd10001c4888d654170000 response = api.getOpeningOptions_0(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a position for the specified job change ID.
     *
     * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionByIdTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetPositionByIdResponse response = api.getPositionById(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a position for the specified job change ID.
     *
     * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionBySubresourceIdTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 response = api.getPositionBySubresourceId(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a job profile for the specified job change ID.
     *
     * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 response = api.getProfile(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the start details for the specified job change ID.
     *
     * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStartDetailsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 response = api.getStartDetails(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the start details for the specified job change ID.
     *
     * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStartDetails_0Test() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        JobChangesGetStartDetailsResponse response = api.getStartDetails_0(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the location options for the specified change job ID.
     *
     * Partially updates the location options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/location/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this request field: location{id}.   To retrieve a location ID, you can call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to locations by location categories for the staffingEvent. You can filter the results by effectiveDate. By default, it returns locations on the current date.   To retrieve a workShift ID, call the GET /values/jobChangesGroup/workShifts prompt endpoint with the location query parameter. It returns work shifts by location. If you don&#39;t specify the location parameter, it returns an empty result.  To retrieve a workSpace ID, call the GET /values/jobChangesGroup/workSpaces prompt endpoint with the location query parameter. It returns HREF links to workspaces by configured prompt categories for the specified location. You can filter the results by effectiveDate. By default, it returns workspaces on the current date.  Secured by: Staffing Actions: Location  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partialUpdateLocationOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Location90151d6c4ff110001bfa027116820278 location = null;
        Integer scheduledHours = null;
        WorkShift0ee7bb8b41db1000143d4e4822174f2e workShift = null;
        WorkSpace0ee7bb8b41db10001e7db6a6c3e55663 workSpace = null;
        ChangeJobLocation90151d6c4ff110001b4a46091678025c response = api.partialUpdateLocationOptions(ID, subresourceID)
                .location(location)
                .scheduledHours(scheduledHours)
                .workShift(workShift)
                .workSpace(workSpace)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the contract options for the specified change job ID.
     *
     * Partially updates the contract details options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/contract/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.   To retrieve a frequency ID, call the GET /values/jobChangesGroup/frequencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all frequencies based on staffing event for contingent workers. By default, it returns all frequencies in the tenant.  To retrieve a currency ID, call the GET /values/jobChangesGroup/currencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to active currencies by prompt category. By default, it returns all active currencies.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partiallyUpdateContractOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        String assignmentDetails = null;
        LocalDate contractEndDate = null;
        Object contractPayRate = null;
        Currency2d0ca2cb2448100009c54386a8570e07 currency = null;
        Frequency2d0ca2cb2448100009c5436d5d670e06 frequency = null;
        PurchaseOrder2d0ca2cb2448100009c5433bcff60e05 purchaseOrder = null;
        ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 response = api.partiallyUpdateContractOptions(ID, subresourceID)
                .assignmentDetails(assignmentDetails)
                .contractEndDate(contractEndDate)
                .contractPayRate(contractPayRate)
                .currency(currency)
                .frequency(frequency)
                .purchaseOrder(purchaseOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit the specified change job ID.
     *
     * Submits the specified change job ID.   To submit the Change Job event and initiate the Change Job business process, specify an empty request body: {}. To save for later, specify this request body: {     \&quot;businessProcessParameters\&quot;: {         \&quot;action\&quot;:{             \&quot;id\&quot;: \&quot;d9e41a8c446c11de98360015c5e6daf6\&quot;         }     } }  The action id value is the Workday ID of the \&quot;Save for Later\&quot; action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Change Job event using the REST APIs. The user with correct permissions can edit and submit the saved Change Job event in the Workday UI.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitChangeJobTest() throws ApiException {
        String ID = null;
        BusinessProcessParameters5afc0b4b5a4610002aaebb8180cd2261 businessProcessParameters = null;
        Status54e611eca2c910000fbc4599be0b0112 status = null;
        String validation = null;
        String id = null;
        String descriptor = null;
        EventState54e611eca2c910000fbc4579181c0111 response = api.submitChangeJob(ID)
                .businessProcessParameters(businessProcessParameters)
                .status(status)
                .validation(validation)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the administrative options for the specified job change ID.
     *
     * Partially updates the administrative options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/administrative/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Note that there are no localization constraints in this API version. You can update the workingFTE and paidFTE fields even if the fields have not been localized.  To retrieve a positionWorkerType ID, you can call the GET /values/jobChangesGroup/employeeTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to employee types by country. By default, it returns all employee types, excluding contingent workers.  For the positionWorkerType ID, you can also call the GET /values/jobChangesGroup/contingentWorkerTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to contingent worker types for staffing event. If you specify location, it returns HREF links to contingent worker types by location or country. By default, it returns all contingent worker types.  To retrieve a workersCompensationCodeOverride ID, call the GET /values/jobChangesGroup/workersCompensationCodeOverrides prompt endpoint, which takes the job change ID as the staffing Event query parameter.   To retrieve a payRateType ID, call the GET /values/jobChangesGroup/payRateTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all pay rate types based on staffing event for contingent workers. By default, it returns all pay rate types in the tenant.   To retrieve companyInsiderType IDs, call the GET /values/jobChangesGroup/companyInsiderTypes prompt endpoint, which returns all company insider types in the tenant.   To retrieve an assignmentType ID, call the GET /values/jobChangesGroup/assignmentTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns assignmentTypes for the staffingEvent. By default, it returns all active assignment types.  To retrieve a workStudy ID, call the GET /values/jobChangesGroup/workStudyAwards prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns work study awards for the staffingEvent. By default, it returns all work studies in the tenant.  To retrieve a timeType ID, call the GET /values/jobChangesGroup/timeTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns time types for the staffingEvent. By default, it returns all time types based on the Relax Hiring Restrictions tenant configuration.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdministrativeOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        PayRateTypeD25283821c01100016756a14eb650000 payRateType = null;
        WorkersCompensationCodeOverride05d4c45042b61000138500e185e0013f workersCompensationCodeOverride = null;
        Integer fte = null;
        LocalDate notifyBy = null;
        List<ChangeJobCompanyInsiderTypesData05d4c45042b61000131e4b2132f30137> companyInsiderTypes = null;
        LocalDate firstDayOfWork = null;
        Integer defaultWeeklyHours = null;
        PositionWorkerType05d4c45042b610001030ee47f2c90118 positionWorkerType = null;
        Integer workingFte = null;
        Boolean specifyWorkingFte = null;
        TimeType05d4c45042b610000bb540b7458e0108 timeType = null;
        Boolean specifyPaidFte = null;
        Integer paidFte = null;
        WorkStudy05d4c45042b610000ba2f83c70f30101 workStudy = null;
        AssignmentType23929e1f68ca10000d6940d6bde56963 assignmentType = null;
        LocalDate endEmploymentDate = null;
        LocalDate expectedAssignmentEndDate = null;
        ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea response = api.updateAdministrativeOptions(ID, subresourceID)
                .payRateType(payRateType)
                .workersCompensationCodeOverride(workersCompensationCodeOverride)
                .fte(fte)
                .notifyBy(notifyBy)
                .companyInsiderTypes(companyInsiderTypes)
                .firstDayOfWork(firstDayOfWork)
                .defaultWeeklyHours(defaultWeeklyHours)
                .positionWorkerType(positionWorkerType)
                .workingFte(workingFte)
                .specifyWorkingFte(specifyWorkingFte)
                .timeType(timeType)
                .specifyPaidFte(specifyPaidFte)
                .paidFte(paidFte)
                .workStudy(workStudy)
                .assignmentType(assignmentType)
                .endEmploymentDate(endEmploymentDate)
                .expectedAssignmentEndDate(expectedAssignmentEndDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the businessTitle options for the specified change job ID.
     *
     * Partially updates the businessTitle options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/businessTitle/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBusinessTitleOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        String businessTitle = null;
        ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 response = api.updateBusinessTitleOptions(ID, subresourceID)
                .businessTitle(businessTitle)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the comment for the specified change job ID.
     *
     * Updates the comment for the specified change job ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  You can call GET /jobChanges/{ID}/comment/{subResourceID} to get the existing data to update.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCommentTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        String comment = null;
        Comments7d98fd55aeee100022968e52a1b31c60 response = api.updateComment(ID, subresourceID)
                .comment(comment)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the jobClassification options for the specified change job ID.
     *
     * Partially updates the job classifications for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobClassification/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: additionalJobClassifications[ {id} ].   To retrieve an additionalJobClassifications ID, call the GET /values/jobChangesGroup/jobClassifications prompt endpoint with the location and/or staffingEvent query parameter. It returns HREF links to job classifications by location for the staffing event. It returns an empty result if both location and staffingEvent are not specified. You can filter the results by effectiveDate. By default, it returns job classifications on the current date.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobClassificationOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        List<ChangeJobAdditionalJobClassificationData27ec818d10d0100003600115b5200102> additionalJobClassifications = null;
        ChangeJobJobClassificationData354103f196361000084489bcb281017f response = api.updateJobClassificationOptions(ID, subresourceID)
                .additionalJobClassifications(additionalJobClassifications)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the jobProfile options for the specified change job ID.
     *
     * Partially updates the job profile options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobProfile/{subResourceID} to get the existing data to update.  The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: jobProfile{id}  To retrieve a jobProfile ID, call the GET /values/jobChangesGroup/jobProfiles prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to the job profiles by the prompt category. If you don&#39;t specify the staffingEvent parameter, it returns all job profiles, regardless of their categories. You can also filter the job profiles by the effectiveDate query parameter. The default is the current date.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobProfileOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        JobProfile3db8095ffa18100013f019afc6d30116 jobProfile = null;
        String jobTitle = null;
        ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 response = api.updateJobProfileOptions(ID, subresourceID)
                .jobProfile(jobProfile)
                .jobTitle(jobTitle)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the moveTeam options for the specified change job ID.
     *
     * Partially updates the moveTeam options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/moveTeam/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Move Manager&#39;s Team  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMoveTeamOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Boolean moveTeam = null;
        ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 response = api.updateMoveTeamOptions(ID, subresourceID)
                .moveTeam(moveTeam)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the opening options for the specified change job ID.
     *
     * Partially updates the opening options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/opening/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: headcountOption{id}   To retrieve a headcountOption ID, call the GET /values/jobChangesGroup/headcountOptions prompt endpoint, which takes the job change ID as the staffingEvent query parameter. By default, it returns all headcount options.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOpeningOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        HeadcountOption97af9049a5fd10001c48896fbde30000 headcountOption = null;
        Boolean openingAvailableForOverlap = null;
        String id = null;
        String descriptor = null;
        ChangeJobOpeningData97af9049a5fd10001c4888d654170000 response = api.updateOpeningOptions(ID, subresourceID)
                .headcountOption(headcountOption)
                .openingAvailableForOverlap(openingAvailableForOverlap)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the position options for the specified change job ID.
     *
     * Partially updates the position options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: position{id}, createPosition, closePosition, availableForOverlap  To retrieve a position ID, call the GET /values/jobChangesGroup/proposedPosition prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to proposed positions based on staffing event for contingent workers. You can filter the results by effectiveDate. By default, it returns all proposed positions on current date.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePositionOptionsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Boolean createPosition = null;
        Boolean availableForOverlap = null;
        PositionDfc4e58f730810001ad60369c23452d1 position = null;
        Boolean closePosition = null;
        JobRequisitionDfc4e58f730810001ad60325d9bc52cf jobRequisition = null;
        String id = null;
        String descriptor = null;
        ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 response = api.updatePositionOptions(ID, subresourceID)
                .createPosition(createPosition)
                .availableForOverlap(availableForOverlap)
                .position(position)
                .closePosition(closePosition)
                .jobRequisition(jobRequisition)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates the startDetails options for the specified change job ID.
     *
     * Partially updates the start details for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: date, reason{id}.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStartDetailsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Worker271bbd673582100010110b9f9a6d99e1 worker = null;
        Boolean useNextPayPeriod = null;
        Template2b1b95dfe4af100009f30dc769a31686 template = null;
        Job35b8f199c29410002508ffd7ad6101f3 job = null;
        LocalDate date = null;
        Location6da81665c26510001fc6b1d42fae5f7b location = null;
        Reason6da81665c26510001f34d0a154765e9b reason = null;
        SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8 supervisoryOrganization = null;
        String id = null;
        String descriptor = null;
        JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 response = api.updateStartDetails(ID, subresourceID)
                .worker(worker)
                .useNextPayPeriod(useNextPayPeriod)
                .template(template)
                .job(job)
                .date(date)
                .location(location)
                .reason(reason)
                .supervisoryOrganization(supervisoryOrganization)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

}
