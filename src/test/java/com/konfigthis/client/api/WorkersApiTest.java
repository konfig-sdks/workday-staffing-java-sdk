/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4;
import com.konfigthis.client.model.AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea;
import com.konfigthis.client.model.CheckInArchiveDetail1163fe23102e10001df342088f8a018e;
import com.konfigthis.client.model.CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7;
import com.konfigthis.client.model.CheckInDetail316b5a26cc3c10000ebdb0cb484602e1;
import com.konfigthis.client.model.CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2;
import com.konfigthis.client.model.CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1;
import com.konfigthis.client.model.CheckInTopicDetail3267c0ba92a010001688d79b032b03b8;
import com.konfigthis.client.model.CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015;
import com.konfigthis.client.model.CheckInsSummaryB3a69f47a499100010ce6be72bfe001d;
import com.konfigthis.client.model.CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e;
import com.konfigthis.client.model.DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.ExternalSkillLevelA39462f09c44100005d46fd77ef00000;
import com.konfigthis.client.model.ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000;
import com.konfigthis.client.model.HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621;
import com.konfigthis.client.model.Job75e528a78e9a10000ab7512c5c550115;
import com.konfigthis.client.model.JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111;
import java.time.LocalDate;
import com.konfigthis.client.model.Location75e528a78e9a10000ab75125ebe50114;
import com.konfigthis.client.model.OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e;
import com.konfigthis.client.model.Position99f6257185e61000043aadd66df203bb;
import com.konfigthis.client.model.Reason85deac43cd1a10000b96c80c118f171e;
import com.konfigthis.client.model.ServiceDatesData6b1db753fd82100027b0c8519c860018;
import com.konfigthis.client.model.SkillItem98f198f5056b100019631445471d225f;
import com.konfigthis.client.model.SkillItemAddDefinitionFaed9891d75a10001e9a289910540228;
import com.konfigthis.client.model.SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8;
import com.konfigthis.client.model.SkillItemSourceAddRepresentationC5fabc4ca81610000d5d15309ac90122;
import com.konfigthis.client.model.SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de;
import com.konfigthis.client.model.SupervisoryOrganization75e528a78e9a10000ab75132a9df0116;
import com.konfigthis.client.model.Template2b1b95dfe4af100007f63081aec5158e;
import com.konfigthis.client.model.WorkContactChangeEvent5fca6c96c1c81000142fd03784140113;
import com.konfigthis.client.model.WorkerDataC2466b0778c610000d1936006720000e;
import com.konfigthis.client.model.WorkersGetCheckInTopicsResponse;
import com.konfigthis.client.model.WorkersGetCheckInsResponse;
import com.konfigthis.client.model.WorkersGetCollectionStaffingResponse;
import com.konfigthis.client.model.WorkersGetExplicitSkillsResponse;
import com.konfigthis.client.model.WorkersGetExternalSkillLevelResponse;
import com.konfigthis.client.model.WorkersGetServiceDatesResponse;
import com.konfigthis.client.model.WorkersGetSkillItemsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkersApi
 */
@Disabled
public class WorkersApiTest {

    private static WorkersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkersApi(apiClient);
    }

    /**
     * Creates Check-Ins.
     *
     * Creates a single Check-In instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least the required field: date.    This endpoint is equivalent to the Create Check-In task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCheckInTest() throws ApiException {
        String ID = null;
        String description = null;
        List<AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea> associatedTopics = null;
        LocalDate date = null;
        List<CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7> checkInAttachments = null;
        String id = null;
        CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 response = api.createCheckIn(ID)
                .description(description)
                .associatedTopics(associatedTopics)
                .date(date)
                .checkInAttachments(checkInAttachments)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates Check-In topics.
     *
     * Creates a single Check-In topic instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least these required fields: name.   This endpoint is equivalent to the Create Check-In Topic task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCheckInTopicTest() throws ApiException {
        String ID = null;
        String sharedNotes = null;
        List<AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4> associatedCheckIns = null;
        String privateNotes = null;
        String name = null;
        List<CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1> checkInTopicAttachments = null;
        String id = null;
        CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 response = api.createCheckInTopic(ID)
                .sharedNotes(sharedNotes)
                .associatedCheckIns(associatedCheckIns)
                .privateNotes(privateNotes)
                .name(name)
                .checkInTopicAttachments(checkInTopicAttachments)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates external skill levels.
     *
     * Creates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExternalSkillLevelsTest() throws ApiException {
        String ID = null;
        Integer externalSkillLevel = null;
        String externalSkillId = null;
        LocalDate effectiveMoment = null;
        String context = null;
        String id = null;
        ExternalSkillLevelA39462f09c44100005d46fd77ef00000 response = api.createExternalSkillLevels(ID)
                .externalSkillLevel(externalSkillLevel)
                .externalSkillId(externalSkillId)
                .effectiveMoment(effectiveMoment)
                .context(context)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHomeContactChangeProcessTest() throws ApiException {
        String ID = null;
        String href = null;
        LocalDate effectiveDate = null;
        String id = null;
        String descriptor = null;
        HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 response = api.createHomeContactChangeProcess(ID)
                .href(href)
                .effectiveDate(effectiveDate)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSkillItemTest() throws ApiException {
        String ID = null;
        List<SkillItemAddDefinitionFaed9891d75a10001e9a289910540228> skillItems = null;
        SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de response = api.createSkillItem(ID)
                .skillItems(skillItems)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkContactInformationChangesTest() throws ApiException {
        String ID = null;
        LocalDate effectiveDate = null;
        String href = null;
        String id = null;
        String descriptor = null;
        WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 response = api.createWorkContactInformationChanges(ID)
                .effectiveDate(effectiveDate)
                .href(href)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes an existing Check-In instance.
     *
     * Deletes an existing Check-In instance with the specified ID. This can only be done by the creater of the Check-In.    This endpoint is equivalent to the Delete Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCheckInTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        api.deleteCheckIn(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes an existing Check-In topic instance.
     *
     * Deletes an existing Check-In topic instance with the specified ID. This can only be done by the creater of the Check-In topic.   This endpoint is equivalent to the Delete Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCheckInTopicTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        api.deleteCheckInTopic(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a single Check-In instance.
     *
     * Retrieves a Check-In with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckInTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        CheckInsSummaryB3a69f47a499100010ce6be72bfe001d response = api.getCheckIn(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a single Check-In topic instance.
     *
     * Retrieves a Check-In topic with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckInTopicTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015 response = api.getCheckInTopic(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a collection of Check-Ins topics.
     *
     * Retrieves all Check-In topics for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckInTopicsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        WorkersGetCheckInTopicsResponse response = api.getCheckInTopics(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a collection of Check-Ins.
     *
     * Retrieves all Check-Ins for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.   This endpoint is equivalent to the View Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckInsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        WorkersGetCheckInsResponse response = api.getCheckIns(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a collection of workers and current staffing information.
     *
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionStaffingTest() throws ApiException {
        Boolean includeTerminatedWorkers = null;
        Long limit = null;
        Long offset = null;
        String search = null;
        WorkersGetCollectionStaffingResponse response = api.getCollectionStaffing()
                .includeTerminatedWorkers(includeTerminatedWorkers)
                .limit(limit)
                .offset(offset)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Explicit Skills for Skill Enabled
     *
     * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExplicitSkillsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        String skill = null;
        String skillSource = null;
        WorkersGetExplicitSkillsResponse response = api.getExplicitSkills(ID)
                .limit(limit)
                .offset(offset)
                .skill(skill)
                .skillSource(skillSource)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Explicit Skills for Skill Enabled
     *
     * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExplicitSkillsForSkillEnabledTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8 response = api.getExplicitSkillsForSkillEnabled(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
     *
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExternalSkillLevelTest() throws ApiException {
        String ID = null;
        String externalSkillId = null;
        Long limit = null;
        Long offset = null;
        WorkersGetExternalSkillLevelResponse response = api.getExternalSkillLevel(ID)
                .externalSkillId(externalSkillId)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
     *
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExternalSkillLevelsTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000 response = api.getExternalSkillLevels(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves an existing Home Contact Change event for the Person.
     *
     * Retrieves an existing Home Contact Change event for the Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHomeContactChangeTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 response = api.getHomeContactChange(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a single service date information instance.
     *
     * Retrieves information about a service date for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceDateTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        ServiceDatesData6b1db753fd82100027b0c8519c860018 response = api.getServiceDate(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a collection of service dates for the specified worker id.
     *
     * Retrieves all service dates for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceDatesTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        WorkersGetServiceDatesResponse response = api.getServiceDates(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSkillItemsTest() throws ApiException {
        String ID = null;
        Long limit = null;
        Long offset = null;
        WorkersGetSkillItemsResponse response = api.getSkillItems(ID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSkillItemsByIdTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8 response = api.getSkillItemsById(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a collection of workers and current staffing information.
     *
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStaffingInformationTest() throws ApiException {
        String ID = null;
        WorkerDataC2466b0778c610000d1936006720000e response = api.getStaffingInformation(ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves an existing Work Contact Change event for the Person.
     *
     * Retrieves an existing Work Contact Change event for the Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkContactChangeTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 response = api.getWorkContactChange(ID, subresourceID)
                .execute();
        // TODO: test validations
    }

    /**
     * Initiates a job change request for a specific worker
     *
     * Initiates a job change request for a specific worker Call this method to start a new job change event, which returns a new job change ID. Use the new ID to reference the job change event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}, reason {id}  To retrieve a worker ID, call the GET /values/jobChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for change job for the current user are returned.  To retrieve a job ID, call the GET /values/jobChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do a job change. You can filter the results by effectiveDate. By default, it returns positions on the current date.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  To retrieve a supervisoryOrganization ID, call the GET /values/jobChangesGroup/supervisoryOrganization prompt endpoint, with proposedManager and effectiveDate query parameters. If you specify the proposedManager parameter, it returns HREF links to all supervisory organizations for that manager. If you specify effectiveDate, it filters the results by effective date. The default is the current date.  To retrieve a location ID, call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the staffingEvent query parameter.  It returns HREF links to locations by location categories for the specified location. You can filter the results by effectiveDate. By default, it returns locations on the current date.  Secured by: Change Job (REST Service)  Scope: Staffing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateJobChangeTest() throws ApiException {
        String ID = null;
        SupervisoryOrganization75e528a78e9a10000ab75132a9df0116 supervisoryOrganization = null;
        Location75e528a78e9a10000ab75125ebe50114 location = null;
        Template2b1b95dfe4af100007f63081aec5158e template = null;
        Reason85deac43cd1a10000b96c80c118f171e reason = null;
        LocalDate date = null;
        Job75e528a78e9a10000ab7512c5c550115 job = null;
        String id = null;
        String descriptor = null;
        JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 response = api.initiateJobChange(ID)
                .supervisoryOrganization(supervisoryOrganization)
                .location(location)
                .template(template)
                .reason(reason)
                .date(date)
                .job(job)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Initiates an organization assignment change for a specific worker.
     *
     * Initiates an organization assignment change for a specific worker. Call this method to start a new change organization assignment event, which returns a new change organization assignment ID. Use the new ID to reference the change organization assignment event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}  To retrieve a worker ID, call the GET /values/organizationAssignmentChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for organization assignment change for the current user are returned.  To retrieve a job ID, call the /values/organizationAssignmentChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do an organization assignment change . You can filter the results by effectiveDate. By default, it returns positions on the current date.  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateOrganizationAssignmentChangeTest() throws ApiException {
        String ID = null;
        Position99f6257185e61000043aadd66df203bb position = null;
        LocalDate date = null;
        String id = null;
        String descriptor = null;
        OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e response = api.initiateOrganizationAssignmentChange(ID)
                .position(position)
                .date(date)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates an existing Check-In to archived or un-archived.
     *
     * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partiallyUpdateCheckInTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Boolean archive = null;
        String id = null;
        String descriptor = null;
        CheckInArchiveDetail1163fe23102e10001df342088f8a018e response = api.partiallyUpdateCheckIn(ID, subresourceID)
                .archive(archive)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates an existing Check-In topic instance.
     *
     * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (name, privateNotes, sharedNotes, checkInTopicAttachments, or associatedCheckIns). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Edit Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partiallyUpdateCheckInTopicTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        String sharedNotes = null;
        List<AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4> associatedCheckIns = null;
        String privateNotes = null;
        String name = null;
        List<CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1> checkInTopicAttachments = null;
        String id = null;
        CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 response = api.partiallyUpdateCheckInTopic(ID, subresourceID)
                .sharedNotes(sharedNotes)
                .associatedCheckIns(associatedCheckIns)
                .privateNotes(privateNotes)
                .name(name)
                .checkInTopicAttachments(checkInTopicAttachments)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Save skills a user has
     *
     * Save skills a user has  Secured by: Self-Service: Skills  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveUserSkillsTest() throws ApiException {
        String ID = null;
        List<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> skills = null;
        SkillItem98f198f5056b100019631445471d225f skillItem = null;
        List<SkillItemSourceAddRepresentationC5fabc4ca81610000d5d15309ac90122> skillSources = null;
        CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e response = api.saveUserSkills(ID)
                .skills(skills)
                .skillItem(skillItem)
                .skillSources(skillSources)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates an existing Check-In instance.
     *
     * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (date, description, or associated topics). This can only be done by the creator or participant of the Check-In.    This endpoint is equivalent to the Edit Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCheckInTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        String description = null;
        List<AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea> associatedTopics = null;
        LocalDate date = null;
        List<CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7> checkInAttachments = null;
        String id = null;
        CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 response = api.updateCheckIn(ID, subresourceID)
                .description(description)
                .associatedTopics(associatedTopics)
                .date(date)
                .checkInAttachments(checkInAttachments)
                .id(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Partially updates an existing Check-In topic to archived or un-archived.
     *
     * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCheckInTopicStateTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Boolean archive = null;
        String id = null;
        String descriptor = null;
        CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 response = api.updateCheckInTopicState(ID, subresourceID)
                .archive(archive)
                .id(id)
                .descriptor(descriptor)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates external skill levels.
     *
     * Updates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExternalSkillLevelTest() throws ApiException {
        String ID = null;
        String subresourceID = null;
        Integer externalSkillLevel = null;
        String externalSkillId = null;
        LocalDate effectiveMoment = null;
        String context = null;
        String id = null;
        ExternalSkillLevelA39462f09c44100005d46fd77ef00000 response = api.updateExternalSkillLevel(ID, subresourceID)
                .externalSkillLevel(externalSkillLevel)
                .externalSkillId(externalSkillId)
                .effectiveMoment(effectiveMoment)
                .context(context)
                .id(id)
                .execute();
        // TODO: test validations
    }

}
