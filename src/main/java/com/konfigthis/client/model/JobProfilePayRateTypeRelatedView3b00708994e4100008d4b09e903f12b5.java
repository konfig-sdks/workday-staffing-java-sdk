/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Country3b00708994e41000095e4647007012bc;
import com.konfigthis.client.model.PayRateType3b00708994e410000c3d01aea96012c1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 {
  public static final String SERIALIZED_NAME_PAY_RATE_TYPE = "payRateType";
  @SerializedName(SERIALIZED_NAME_PAY_RATE_TYPE)
  private PayRateType3b00708994e410000c3d01aea96012c1 payRateType;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country3b00708994e41000095e4647007012bc country;

  public JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5() {
  }

  public JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 payRateType(PayRateType3b00708994e410000c3d01aea96012c1 payRateType) {
    
    
    
    
    this.payRateType = payRateType;
    return this;
  }

   /**
   * Get payRateType
   * @return payRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayRateType3b00708994e410000c3d01aea96012c1 getPayRateType() {
    return payRateType;
  }


  public void setPayRateType(PayRateType3b00708994e410000c3d01aea96012c1 payRateType) {
    
    
    
    this.payRateType = payRateType;
  }


  public JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 country(Country3b00708994e41000095e4647007012bc country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Country3b00708994e41000095e4647007012bc getCountry() {
    return country;
  }


  public void setCountry(Country3b00708994e41000095e4647007012bc country) {
    
    
    
    this.country = country;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 instance itself
   */
  public JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 jobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 = (JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5) o;
    return Objects.equals(this.payRateType, jobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.payRateType) &&
        Objects.equals(this.country, jobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.country)&&
        Objects.equals(this.additionalProperties, jobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payRateType, country, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 {\n");
    sb.append("    payRateType: ").append(toIndentedString(payRateType)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payRateType");
    openapiFields.add("country");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 is not found in the empty JSON string", JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `payRateType`
      if (jsonObj.get("payRateType") != null && !jsonObj.get("payRateType").isJsonNull()) {
        PayRateType3b00708994e410000c3d01aea96012c1.validateJsonObject(jsonObj.getAsJsonObject("payRateType"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        Country3b00708994e41000095e4647007012bc.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5>() {
           @Override
           public void write(JsonWriter out, JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5
  * @throws IOException if the JSON string is invalid with respect to JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5
  */
  public static JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5.class);
  }

 /**
  * Convert an instance of JobProfilePayRateTypeRelatedView3b00708994e4100008d4b09e903f12b5 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

