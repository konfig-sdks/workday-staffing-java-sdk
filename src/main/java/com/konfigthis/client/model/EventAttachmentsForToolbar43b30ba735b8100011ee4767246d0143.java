/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Category43b30ba735b8100011ee4781a9d50146;
import com.konfigthis.client.model.ContentType43b30ba735b8100011ee47993f11014a;
import com.konfigthis.client.model.UploadedByB32ff437243510000e22e06470370160;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentType43b30ba735b8100011ee47993f11014a contentType;

  public static final String SERIALIZED_NAME_FILE_LENGTH = "fileLength";
  @SerializedName(SERIALIZED_NAME_FILE_LENGTH)
  private Integer fileLength;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "uploadDate";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  private LocalDate uploadDate;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_UPLOADED_BY = "uploadedBy";
  @SerializedName(SERIALIZED_NAME_UPLOADED_BY)
  private UploadedByB32ff437243510000e22e06470370160 uploadedBy;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category43b30ba735b8100011ee4781a9d50146 category;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143() {
  }

  
  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143(
     LocalDate uploadDate
  ) {
    this();
    this.uploadDate = uploadDate;
  }

  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Event attachment description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Lorem ipsum dolor sit amet, cum choro singulis consectetuer ut, ubique iisque contentiones ex duo. Quo lorem etiam eu.", value = "Event attachment description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 contentType(ContentType43b30ba735b8100011ee47993f11014a contentType) {
    
    
    
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentType43b30ba735b8100011ee47993f11014a getContentType() {
    return contentType;
  }


  public void setContentType(ContentType43b30ba735b8100011ee47993f11014a contentType) {
    
    
    
    this.contentType = contentType;
  }


  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 fileLength(Integer fileLength) {
    
    
    
    
    this.fileLength = fileLength;
    return this;
  }

   /**
   * File length of the attachment
   * @return fileLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "53461586", value = "File length of the attachment")

  public Integer getFileLength() {
    return fileLength;
  }


  public void setFileLength(Integer fileLength) {
    
    
    
    this.fileLength = fileLength;
  }


   /**
   * Returns Date the Business Process Attachment was updated.
   * @return uploadDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returns Date the Business Process Attachment was updated.")

  public LocalDate getUploadDate() {
    return uploadDate;
  }




  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 fileName(String fileName) {
    
    
    
    
    this.fileName = fileName;
    return this;
  }

   /**
   * File name of the attachment
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Lorem ipsum dolor sit amet, cum choro singulis consectetuer ut, ubique iisque contentiones ex duo. Quo lorem etiam eu.", value = "File name of the attachment")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    
    
    
    this.fileName = fileName;
  }


  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 uploadedBy(UploadedByB32ff437243510000e22e06470370160 uploadedBy) {
    
    
    
    
    this.uploadedBy = uploadedBy;
    return this;
  }

   /**
   * Get uploadedBy
   * @return uploadedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UploadedByB32ff437243510000e22e06470370160 getUploadedBy() {
    return uploadedBy;
  }


  public void setUploadedBy(UploadedByB32ff437243510000e22e06470370160 uploadedBy) {
    
    
    
    this.uploadedBy = uploadedBy;
  }


  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 category(Category43b30ba735b8100011ee4781a9d50146 category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Category43b30ba735b8100011ee4781a9d50146 getCategory() {
    return category;
  }


  public void setCategory(Category43b30ba735b8100011ee4781a9d50146 category) {
    
    
    
    this.category = category;
  }


  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Id of the instance
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the instance")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 instance itself
   */
  public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 = (EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143) o;
    return Objects.equals(this.description, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.description) &&
        Objects.equals(this.contentType, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.contentType) &&
        Objects.equals(this.fileLength, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.fileLength) &&
        Objects.equals(this.uploadDate, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.uploadDate) &&
        Objects.equals(this.fileName, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.fileName) &&
        Objects.equals(this.uploadedBy, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.uploadedBy) &&
        Objects.equals(this.category, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.category) &&
        Objects.equals(this.id, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.id)&&
        Objects.equals(this.additionalProperties, eventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, contentType, fileLength, uploadDate, fileName, uploadedBy, category, id, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fileLength: ").append(toIndentedString(fileLength)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    uploadedBy: ").append(toIndentedString(uploadedBy)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("contentType");
    openapiFields.add("fileLength");
    openapiFields.add("uploadDate");
    openapiFields.add("fileName");
    openapiFields.add("uploadedBy");
    openapiFields.add("category");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 is not found in the empty JSON string", EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `contentType`
      if (jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) {
        ContentType43b30ba735b8100011ee47993f11014a.validateJsonObject(jsonObj.getAsJsonObject("contentType"));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // validate the optional field `uploadedBy`
      if (jsonObj.get("uploadedBy") != null && !jsonObj.get("uploadedBy").isJsonNull()) {
        UploadedByB32ff437243510000e22e06470370160.validateJsonObject(jsonObj.getAsJsonObject("uploadedBy"));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category43b30ba735b8100011ee4781a9d50146.validateJsonObject(jsonObj.getAsJsonObject("category"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.class));

       return (TypeAdapter<T>) new TypeAdapter<EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143>() {
           @Override
           public void write(JsonWriter out, EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143
  * @throws IOException if the JSON string is invalid with respect to EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143
  */
  public static EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143.class);
  }

 /**
  * Convert an instance of EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

