/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.JobFamiliesListResponse;
import com.konfigthis.client.model.JobFamilyView51ed1475e9e6100005d10fcedc5a000a;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobFamiliesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobFamiliesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobFamiliesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobFamilies/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getById(Async)");
        }

        return getByIdCall(ID, _callback);

    }


    private ApiResponse<JobFamilyView51ed1475e9e6100005d10fcedc5a000a> getByIdWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<JobFamilyView51ed1475e9e6100005d10fcedc5a000a>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String ID, final ApiCallback<JobFamilyView51ed1475e9e6100005d10fcedc5a000a> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<JobFamilyView51ed1475e9e6100005d10fcedc5a000a>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String ID;

        private GetByIdRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(ID, _callback);
        }


        /**
         * Execute getById request
         * @return JobFamilyView51ed1475e9e6100005d10fcedc5a000a
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobFamilyView51ed1475e9e6100005d10fcedc5a000a execute() throws ApiException {
            ApiResponse<JobFamilyView51ed1475e9e6100005d10fcedc5a000a> localVarResp = getByIdWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;JobFamilyView51ed1475e9e6100005d10fcedc5a000a&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobFamilyView51ed1475e9e6100005d10fcedc5a000a> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(ID);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobFamilyView51ed1475e9e6100005d10fcedc5a000a> _callback) throws ApiException {
            return getByIdAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a single job family instance.
     * Retrieves a job family with the specified ID.  Secured by: Job Information  Scope: Jobs &amp; Positions
     * @param ID The Workday ID of the resource. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetByIdRequestBuilder(ID);
    }
    private okhttp3.Call listCall(Boolean inactive, List<String> jobFamilyGroup, List<String> jobProfile, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobFamilies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inactive", inactive));
        }

        if (jobFamilyGroup != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "jobFamilyGroup", jobFamilyGroup));
        }

        if (jobProfile != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "jobProfile", jobProfile));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Boolean inactive, List<String> jobFamilyGroup, List<String> jobProfile, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return listCall(inactive, jobFamilyGroup, jobProfile, limit, offset, _callback);

    }


    private ApiResponse<JobFamiliesListResponse> listWithHttpInfo(Boolean inactive, List<String> jobFamilyGroup, List<String> jobProfile, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(inactive, jobFamilyGroup, jobProfile, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobFamiliesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Boolean inactive, List<String> jobFamilyGroup, List<String> jobProfile, Long limit, Long offset, final ApiCallback<JobFamiliesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(inactive, jobFamilyGroup, jobProfile, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobFamiliesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Boolean inactive;
        private List<String> jobFamilyGroup;
        private List<String> jobProfile;
        private Long limit;
        private Long offset;

        private ListRequestBuilder() {
        }

        /**
         * Set inactive
         * @param inactive If true, the method returns inactive job families. Default is false. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder inactive(Boolean inactive) {
            this.inactive = inactive;
            return this;
        }
        
        /**
         * Set jobFamilyGroup
         * @param jobFamilyGroup The job family group for the job family. You can specify more than 1 jobFamilyGroup query parameter. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder jobFamilyGroup(List<String> jobFamilyGroup) {
            this.jobFamilyGroup = jobFamilyGroup;
            return this;
        }
        
        /**
         * Set jobProfile
         * @param jobProfile The job profile for the job family. You can specify more than 1 jobFamilyGroup query parameter. For possible values, you can use a returned id from GET /jobProfiles. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder jobProfile(List<String> jobProfile) {
            this.jobProfile = jobProfile;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(inactive, jobFamilyGroup, jobProfile, limit, offset, _callback);
        }


        /**
         * Execute list request
         * @return JobFamiliesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobFamiliesListResponse execute() throws ApiException {
            ApiResponse<JobFamiliesListResponse> localVarResp = listWithHttpInfo(inactive, jobFamilyGroup, jobProfile, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;JobFamiliesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobFamiliesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(inactive, jobFamilyGroup, jobProfile, limit, offset);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobFamiliesListResponse> _callback) throws ApiException {
            return listAsync(inactive, jobFamilyGroup, jobProfile, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of job families.
     * Retrieves a collection of job families.  Secured by: Job Information  Scope: Jobs &amp; Positions
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
