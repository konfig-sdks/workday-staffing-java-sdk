/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.JobData1bfa8925c50510000ae4479925510026;
import com.konfigthis.client.model.OrgChartView643e3a12629710000554e0338e670044;
import com.konfigthis.client.model.SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018;
import com.konfigthis.client.model.SupervisoryOrganizationsGetByIdResponse;
import com.konfigthis.client.model.SupervisoryOrganizationsGetMembersResponse;
import com.konfigthis.client.model.SupervisoryOrganizationsGetOrgChartResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SupervisoryOrganizationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupervisoryOrganizationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SupervisoryOrganizationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(Boolean includeInactive, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supervisoryOrganizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Boolean includeInactive, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getByIdCall(includeInactive, limit, offset, _callback);

    }


    private ApiResponse<SupervisoryOrganizationsGetByIdResponse> getByIdWithHttpInfo(Boolean includeInactive, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(includeInactive, limit, offset, null);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Boolean includeInactive, Long limit, Long offset, final ApiCallback<SupervisoryOrganizationsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(includeInactive, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private Boolean includeInactive;
        private Long limit;
        private Long offset;

        private GetByIdRequestBuilder() {
        }

        /**
         * Set includeInactive
         * @param includeInactive If true, this method returns the inactive organizations. Default is false. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder includeInactive(Boolean includeInactive) {
            this.includeInactive = includeInactive;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(includeInactive, limit, offset, _callback);
        }


        /**
         * Execute getById request
         * @return SupervisoryOrganizationsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SupervisoryOrganizationsGetByIdResponse execute() throws ApiException {
            ApiResponse<SupervisoryOrganizationsGetByIdResponse> localVarResp = getByIdWithHttpInfo(includeInactive, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;SupervisoryOrganizationsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupervisoryOrganizationsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(includeInactive, limit, offset);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupervisoryOrganizationsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(includeInactive, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a supervisory organization for the specified ID.
     * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById() throws IllegalArgumentException {
        return new GetByIdRequestBuilder();
    }
    private okhttp3.Call getInstanceCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supervisoryOrganizations/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstanceValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getInstance(Async)");
        }

        return getInstanceCall(ID, _callback);

    }


    private ApiResponse<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018> getInstanceWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getInstanceValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstanceAsync(String ID, final ApiCallback<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstanceValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstanceRequestBuilder {
        private final String ID;

        private GetInstanceRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstanceCall(ID, _callback);
        }


        /**
         * Execute getInstance request
         * @return SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018 execute() throws ApiException {
            ApiResponse<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018> localVarResp = getInstanceWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstance request with HTTP info returned
         * @return ApiResponse&lt;SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018> executeWithHttpInfo() throws ApiException {
            return getInstanceWithHttpInfo(ID);
        }

        /**
         * Execute getInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018> _callback) throws ApiException {
            return getInstanceAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a single supervisory organization instance.
     * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
     * @param ID The Workday ID of the resource. (required)
     * @return GetInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstanceRequestBuilder getInstance(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetInstanceRequestBuilder(ID);
    }
    private okhttp3.Call getMemberCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supervisoryOrganizations/{ID}/members/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getMember(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getMember(Async)");
        }

        return getMemberCall(ID, subresourceID, _callback);

    }


    private ApiResponse<JobData1bfa8925c50510000ae4479925510026> getMemberWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getMemberValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<JobData1bfa8925c50510000ae4479925510026>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberAsync(String ID, String subresourceID, final ApiCallback<JobData1bfa8925c50510000ae4479925510026> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<JobData1bfa8925c50510000ae4479925510026>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetMemberRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getMember request
         * @return JobData1bfa8925c50510000ae4479925510026
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobData1bfa8925c50510000ae4479925510026 execute() throws ApiException {
            ApiResponse<JobData1bfa8925c50510000ae4479925510026> localVarResp = getMemberWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMember request with HTTP info returned
         * @return ApiResponse&lt;JobData1bfa8925c50510000ae4479925510026&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobData1bfa8925c50510000ae4479925510026> executeWithHttpInfo() throws ApiException {
            return getMemberWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobData1bfa8925c50510000ae4479925510026> _callback) throws ApiException {
            return getMemberAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single member instance.
     * Retrieves a member for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberRequestBuilder getMember(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetMemberRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getMembersCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supervisoryOrganizations/{ID}/members"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getMembers(Async)");
        }

        return getMembersCall(ID, limit, offset, _callback);

    }


    private ApiResponse<SupervisoryOrganizationsGetMembersResponse> getMembersWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getMembersValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationsGetMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMembersAsync(String ID, Long limit, Long offset, final ApiCallback<SupervisoryOrganizationsGetMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationsGetMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMembersRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetMembersRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetMembersRequestBuilder
         */
        public GetMembersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetMembersRequestBuilder
         */
        public GetMembersRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getMembers request
         * @return SupervisoryOrganizationsGetMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SupervisoryOrganizationsGetMembersResponse execute() throws ApiException {
            ApiResponse<SupervisoryOrganizationsGetMembersResponse> localVarResp = getMembersWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMembers request with HTTP info returned
         * @return ApiResponse&lt;SupervisoryOrganizationsGetMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupervisoryOrganizationsGetMembersResponse> executeWithHttpInfo() throws ApiException {
            return getMembersWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupervisoryOrganizationsGetMembersResponse> _callback) throws ApiException {
            return getMembersAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of members for the specified supervisory organization ID.
     * Retrieves a collection of members for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @param ID The Workday ID of the resource. (required)
     * @return GetMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersRequestBuilder getMembers(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetMembersRequestBuilder(ID);
    }
    private okhttp3.Call getOrgChartCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supervisoryOrganizations/{ID}/orgChart"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgChartValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getOrgChart(Async)");
        }

        return getOrgChartCall(ID, limit, offset, _callback);

    }


    private ApiResponse<SupervisoryOrganizationsGetOrgChartResponse> getOrgChartWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getOrgChartValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationsGetOrgChartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrgChartAsync(String ID, Long limit, Long offset, final ApiCallback<SupervisoryOrganizationsGetOrgChartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgChartValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<SupervisoryOrganizationsGetOrgChartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrgChartRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetOrgChartRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetOrgChartRequestBuilder
         */
        public GetOrgChartRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetOrgChartRequestBuilder
         */
        public GetOrgChartRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getOrgChart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgChartCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getOrgChart request
         * @return SupervisoryOrganizationsGetOrgChartResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SupervisoryOrganizationsGetOrgChartResponse execute() throws ApiException {
            ApiResponse<SupervisoryOrganizationsGetOrgChartResponse> localVarResp = getOrgChartWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrgChart request with HTTP info returned
         * @return ApiResponse&lt;SupervisoryOrganizationsGetOrgChartResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupervisoryOrganizationsGetOrgChartResponse> executeWithHttpInfo() throws ApiException {
            return getOrgChartWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getOrgChart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupervisoryOrganizationsGetOrgChartResponse> _callback) throws ApiException {
            return getOrgChartAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves information about an organization chart of the specified supervisory organization id.
     * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @param ID The Workday ID of the resource. (required)
     * @return GetOrgChartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgChartRequestBuilder getOrgChart(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetOrgChartRequestBuilder(ID);
    }
    private okhttp3.Call getOrgChart_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supervisoryOrganizations/{ID}/orgChart/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgChart_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getOrgChart_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getOrgChart_0(Async)");
        }

        return getOrgChart_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<OrgChartView643e3a12629710000554e0338e670044> getOrgChart_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getOrgChart_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<OrgChartView643e3a12629710000554e0338e670044>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrgChart_0Async(String ID, String subresourceID, final ApiCallback<OrgChartView643e3a12629710000554e0338e670044> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgChart_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<OrgChartView643e3a12629710000554e0338e670044>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrgChart0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetOrgChart0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getOrgChart_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgChart_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getOrgChart_0 request
         * @return OrgChartView643e3a12629710000554e0338e670044
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public OrgChartView643e3a12629710000554e0338e670044 execute() throws ApiException {
            ApiResponse<OrgChartView643e3a12629710000554e0338e670044> localVarResp = getOrgChart_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrgChart_0 request with HTTP info returned
         * @return ApiResponse&lt;OrgChartView643e3a12629710000554e0338e670044&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgChartView643e3a12629710000554e0338e670044> executeWithHttpInfo() throws ApiException {
            return getOrgChart_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getOrgChart_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgChartView643e3a12629710000554e0338e670044> _callback) throws ApiException {
            return getOrgChart_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single organization chart instance.
     * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetOrgChart0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgChart0RequestBuilder getOrgChart_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetOrgChart0RequestBuilder(ID, subresourceID);
    }
}
