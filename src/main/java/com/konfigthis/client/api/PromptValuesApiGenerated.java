/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ERRORMODELREFERENCE;
import java.time.LocalDate;
import com.konfigthis.client.model.MULTIPLEINSTANCEMODELREFERENCE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PromptValuesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromptValuesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PromptValuesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call availableLocationsCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call availableLocationsValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return availableLocationsCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> availableLocationsWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = availableLocationsValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call availableLocationsAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = availableLocationsValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AvailableLocationsRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private AvailableLocationsRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return AvailableLocationsRequestBuilder
         */
        public AvailableLocationsRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for availableLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return availableLocationsCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute availableLocations request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = availableLocationsWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute availableLocations request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return availableLocationsWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute availableLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return availableLocationsAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return AvailableLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public AvailableLocationsRequestBuilder availableLocations() throws IllegalArgumentException {
        return new AvailableLocationsRequestBuilder();
    }
    private okhttp3.Call getAssignmentChangeGroupCostCentersCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/costCenters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentChangeGroupCostCentersValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getAssignmentChangeGroupCostCentersCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getAssignmentChangeGroupCostCentersWithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentChangeGroupCostCentersValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentChangeGroupCostCentersAsync(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentChangeGroupCostCentersValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentChangeGroupCostCentersRequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetAssignmentChangeGroupCostCentersRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetAssignmentChangeGroupCostCentersRequestBuilder
         */
        public GetAssignmentChangeGroupCostCentersRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetAssignmentChangeGroupCostCentersRequestBuilder
         */
        public GetAssignmentChangeGroupCostCentersRequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetAssignmentChangeGroupCostCentersRequestBuilder
         */
        public GetAssignmentChangeGroupCostCentersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAssignmentChangeGroupCostCentersRequestBuilder
         */
        public GetAssignmentChangeGroupCostCentersRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetAssignmentChangeGroupCostCentersRequestBuilder
         */
        public GetAssignmentChangeGroupCostCentersRequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetAssignmentChangeGroupCostCentersRequestBuilder
         */
        public GetAssignmentChangeGroupCostCentersRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getAssignmentChangeGroupCostCenters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentChangeGroupCostCentersCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getAssignmentChangeGroupCostCenters request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getAssignmentChangeGroupCostCentersWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignmentChangeGroupCostCenters request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getAssignmentChangeGroupCostCentersWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getAssignmentChangeGroupCostCenters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getAssignmentChangeGroupCostCentersAsync(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetAssignmentChangeGroupCostCentersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentChangeGroupCostCentersRequestBuilder getAssignmentChangeGroupCostCenters() throws IllegalArgumentException {
        return new GetAssignmentChangeGroupCostCentersRequestBuilder();
    }
    private okhttp3.Call getAssignmentTypesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/assignmentTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentTypesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getAssignmentTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getAssignmentTypesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentTypesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentTypesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetAssignmentTypesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetAssignmentTypesRequestBuilder
         */
        public GetAssignmentTypesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getAssignmentTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getAssignmentTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getAssignmentTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignmentTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getAssignmentTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getAssignmentTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getAssignmentTypesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetAssignmentTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentTypesRequestBuilder getAssignmentTypes() throws IllegalArgumentException {
        return new GetAssignmentTypesRequestBuilder();
    }
    private okhttp3.Call getCompanyInsiderTypesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/companyInsiderTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyInsiderTypesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getCompanyInsiderTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getCompanyInsiderTypesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getCompanyInsiderTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyInsiderTypesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyInsiderTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyInsiderTypesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetCompanyInsiderTypesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetCompanyInsiderTypesRequestBuilder
         */
        public GetCompanyInsiderTypesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getCompanyInsiderTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyInsiderTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getCompanyInsiderTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getCompanyInsiderTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyInsiderTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getCompanyInsiderTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getCompanyInsiderTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getCompanyInsiderTypesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetCompanyInsiderTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyInsiderTypesRequestBuilder getCompanyInsiderTypes() throws IllegalArgumentException {
        return new GetCompanyInsiderTypesRequestBuilder();
    }
    private okhttp3.Call getContingentWorkerTypesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/contingentWorkerTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContingentWorkerTypesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getContingentWorkerTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getContingentWorkerTypesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getContingentWorkerTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContingentWorkerTypesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContingentWorkerTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContingentWorkerTypesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetContingentWorkerTypesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetContingentWorkerTypesRequestBuilder
         */
        public GetContingentWorkerTypesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getContingentWorkerTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContingentWorkerTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getContingentWorkerTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getContingentWorkerTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContingentWorkerTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getContingentWorkerTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getContingentWorkerTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getContingentWorkerTypesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetContingentWorkerTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetContingentWorkerTypesRequestBuilder getContingentWorkerTypes() throws IllegalArgumentException {
        return new GetContingentWorkerTypesRequestBuilder();
    }
    private okhttp3.Call getCurrencyInstancesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyInstancesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getCurrencyInstancesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getCurrencyInstancesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyInstancesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrencyInstancesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyInstancesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrencyInstancesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetCurrencyInstancesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetCurrencyInstancesRequestBuilder
         */
        public GetCurrencyInstancesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getCurrencyInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrencyInstancesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getCurrencyInstances request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getCurrencyInstancesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrencyInstances request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getCurrencyInstancesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getCurrencyInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getCurrencyInstancesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetCurrencyInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrencyInstancesRequestBuilder getCurrencyInstances() throws IllegalArgumentException {
        return new GetCurrencyInstancesRequestBuilder();
    }
    private okhttp3.Call getEmployeeTypesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/employeeTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeTypesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getEmployeeTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getEmployeeTypesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeTypesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeTypesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetEmployeeTypesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetEmployeeTypesRequestBuilder
         */
        public GetEmployeeTypesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getEmployeeTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getEmployeeTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getEmployeeTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getEmployeeTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getEmployeeTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getEmployeeTypesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetEmployeeTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeTypesRequestBuilder getEmployeeTypes() throws IllegalArgumentException {
        return new GetEmployeeTypesRequestBuilder();
    }
    private okhttp3.Call getGiftInstancesCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/gifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftInstancesValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getGiftInstancesCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getGiftInstancesWithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getGiftInstancesValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGiftInstancesAsync(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftInstancesValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGiftInstancesRequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetGiftInstancesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetGiftInstancesRequestBuilder
         */
        public GetGiftInstancesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetGiftInstancesRequestBuilder
         */
        public GetGiftInstancesRequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetGiftInstancesRequestBuilder
         */
        public GetGiftInstancesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetGiftInstancesRequestBuilder
         */
        public GetGiftInstancesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetGiftInstancesRequestBuilder
         */
        public GetGiftInstancesRequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetGiftInstancesRequestBuilder
         */
        public GetGiftInstancesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getGiftInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGiftInstancesCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getGiftInstances request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getGiftInstancesWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGiftInstances request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getGiftInstancesWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getGiftInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getGiftInstancesAsync(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetGiftInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetGiftInstancesRequestBuilder getGiftInstances() throws IllegalArgumentException {
        return new GetGiftInstancesRequestBuilder();
    }
    private okhttp3.Call getGrantsCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/grants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrantsValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getGrantsCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getGrantsWithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getGrantsValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrantsAsync(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrantsValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGrantsRequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetGrantsRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetGrantsRequestBuilder
         */
        public GetGrantsRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetGrantsRequestBuilder
         */
        public GetGrantsRequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetGrantsRequestBuilder
         */
        public GetGrantsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetGrantsRequestBuilder
         */
        public GetGrantsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetGrantsRequestBuilder
         */
        public GetGrantsRequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetGrantsRequestBuilder
         */
        public GetGrantsRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrantsCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getGrants request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getGrantsWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGrants request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getGrantsWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getGrantsAsync(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetGrantsRequestBuilder getGrants() throws IllegalArgumentException {
        return new GetGrantsRequestBuilder();
    }
    private okhttp3.Call getInstancesCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstancesValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstancesCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstancesWithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstancesAsync(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstancesRequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstancesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstancesCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstancesWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstancesWithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstancesAsync(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstancesRequestBuilder getInstances() throws IllegalArgumentException {
        return new GetInstancesRequestBuilder();
    }
    private okhttp3.Call getInstances_0Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/reason";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_0ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_0Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_0WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_0ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_0Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_0ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances0RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances0RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_0Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_0 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_0WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_0 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_0WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_0Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances0RequestBuilder getInstances_0() throws IllegalArgumentException {
        return new GetInstances0RequestBuilder();
    }
    private okhttp3.Call getInstances_1Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/customs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_1ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_1Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_1WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_1ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_1Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_1ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances1RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances1RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_1Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_1 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_1WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_1 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_1WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_1Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances1RequestBuilder getInstances_1() throws IllegalArgumentException {
        return new GetInstances1RequestBuilder();
    }
    private okhttp3.Call getInstances_10Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_10ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_10Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_10WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_10ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_10Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_10ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances10RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances10RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances10RequestBuilder
         */
        public GetInstances10RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_10
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_10Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_10 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_10WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_10 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_10WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_10 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_10Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances10RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances10RequestBuilder getInstances_10() throws IllegalArgumentException {
        return new GetInstances10RequestBuilder();
    }
    private okhttp3.Call getInstances_11Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/workers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_11ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_11Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_11WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_11ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_11Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_11ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances11RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances11RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances11RequestBuilder
         */
        public GetInstances11RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_11
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_11Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_11 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_11WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_11 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_11WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_11 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_11Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances11RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances11RequestBuilder getInstances_11() throws IllegalArgumentException {
        return new GetInstances11RequestBuilder();
    }
    private okhttp3.Call getInstances_12Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_12ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_12Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_12WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_12ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_12Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_12ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances12RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances12RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances12RequestBuilder
         */
        public GetInstances12RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_12
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_12Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_12 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_12WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_12 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_12WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_12 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_12Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances12RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances12RequestBuilder getInstances_12() throws IllegalArgumentException {
        return new GetInstances12RequestBuilder();
    }
    private okhttp3.Call getInstances_13Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/workers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_13ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_13Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_13WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_13ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_13Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_13ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances13RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances13RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances13RequestBuilder
         */
        public GetInstances13RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances13RequestBuilder
         */
        public GetInstances13RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances13RequestBuilder
         */
        public GetInstances13RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances13RequestBuilder
         */
        public GetInstances13RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances13RequestBuilder
         */
        public GetInstances13RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances13RequestBuilder
         */
        public GetInstances13RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_13
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_13Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_13 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_13WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_13 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_13WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_13 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_13Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances13RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances13RequestBuilder getInstances_13() throws IllegalArgumentException {
        return new GetInstances13RequestBuilder();
    }
    private okhttp3.Call getInstances_14Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/workStudyAwards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_14ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_14Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_14WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_14ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_14Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_14ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances14RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances14RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances14RequestBuilder
         */
        public GetInstances14RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_14
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_14Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_14 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_14WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_14 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_14WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_14 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_14Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances14RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances14RequestBuilder getInstances_14() throws IllegalArgumentException {
        return new GetInstances14RequestBuilder();
    }
    private okhttp3.Call getInstances_15Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_15ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_15Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_15WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_15ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_15Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_15ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances15RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances15RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances15RequestBuilder
         */
        public GetInstances15RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances15RequestBuilder
         */
        public GetInstances15RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances15RequestBuilder
         */
        public GetInstances15RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances15RequestBuilder
         */
        public GetInstances15RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances15RequestBuilder
         */
        public GetInstances15RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances15RequestBuilder
         */
        public GetInstances15RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_15
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_15Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_15 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_15WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_15 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_15WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_15 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_15Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances15RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances15RequestBuilder getInstances_15() throws IllegalArgumentException {
        return new GetInstances15RequestBuilder();
    }
    private okhttp3.Call getInstances_16Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/jobRequisitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_16ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_16Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_16WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_16ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_16Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_16ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances16RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances16RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances16RequestBuilder
         */
        public GetInstances16RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_16
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_16Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_16 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_16WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_16 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_16WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_16 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_16Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances16RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances16RequestBuilder getInstances_16() throws IllegalArgumentException {
        return new GetInstances16RequestBuilder();
    }
    private okhttp3.Call getInstances_17Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/jobProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_17ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_17Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_17WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_17ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_17Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_17ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances17RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances17RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances17RequestBuilder
         */
        public GetInstances17RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_17
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_17Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_17 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_17WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_17 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_17WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_17 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_17Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances17RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances17RequestBuilder getInstances_17() throws IllegalArgumentException {
        return new GetInstances17RequestBuilder();
    }
    private okhttp3.Call getInstances_18Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_18ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_18Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_18WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_18ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_18Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_18ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances18RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances18RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances18RequestBuilder
         */
        public GetInstances18RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances18RequestBuilder
         */
        public GetInstances18RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances18RequestBuilder
         */
        public GetInstances18RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances18RequestBuilder
         */
        public GetInstances18RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances18RequestBuilder
         */
        public GetInstances18RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances18RequestBuilder
         */
        public GetInstances18RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_18
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_18Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_18 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_18WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_18 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_18WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_18 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_18Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances18RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances18RequestBuilder getInstances_18() throws IllegalArgumentException {
        return new GetInstances18RequestBuilder();
    }
    private okhttp3.Call getInstances_19Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/jobClassifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_19ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_19Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_19WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_19ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_19Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_19ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances19RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances19RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances19RequestBuilder
         */
        public GetInstances19RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_19
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_19Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_19 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_19WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_19 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_19WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_19 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_19Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances19RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances19RequestBuilder getInstances_19() throws IllegalArgumentException {
        return new GetInstances19RequestBuilder();
    }
    private okhttp3.Call getInstances_2Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/programs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_2ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_2Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_2WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_2ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_2Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_2ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances2RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances2RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_2Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_2 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_2WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_2 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_2WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_2Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances2RequestBuilder getInstances_2() throws IllegalArgumentException {
        return new GetInstances2RequestBuilder();
    }
    private okhttp3.Call getInstances_3Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_3ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_3Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_3WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_3ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_3Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_3ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances3RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances3RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_3
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_3Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_3 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_3WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_3 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_3WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_3 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_3Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances3RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances3RequestBuilder getInstances_3() throws IllegalArgumentException {
        return new GetInstances3RequestBuilder();
    }
    private okhttp3.Call getInstances_4Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/funds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_4ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_4Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_4WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_4ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_4Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_4ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances4RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances4RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_4
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_4Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_4 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_4WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_4 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_4WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_4 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_4Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances4RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances4RequestBuilder getInstances_4() throws IllegalArgumentException {
        return new GetInstances4RequestBuilder();
    }
    private okhttp3.Call getInstances_5Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/workersCompensationCodeOverrides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_5ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_5Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_5WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_5ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_5Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_5ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances5RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances5RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_5
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_5Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_5 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_5WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_5 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_5WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_5 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_5Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances5RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances5RequestBuilder getInstances_5() throws IllegalArgumentException {
        return new GetInstances5RequestBuilder();
    }
    private okhttp3.Call getInstances_6Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/workShifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_6ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_6Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_6WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_6ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_6Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_6ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances6RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances6RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances6RequestBuilder
         */
        public GetInstances6RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_6
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_6Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_6 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_6WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_6 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_6WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_6 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_6Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances6RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances6RequestBuilder getInstances_6() throws IllegalArgumentException {
        return new GetInstances6RequestBuilder();
    }
    private okhttp3.Call getInstances_7Call(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/organizationAssignmentChangesGroup/businessUnits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organizationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationType", organizationType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_7ValidateBeforeCall(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_7Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_7WithHttpInfo(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_7ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_7Async(LocalDate effectiveDate, String event, Long limit, Long offset, String organizationType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_7ValidateBeforeCall(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances7RequestBuilder {
        private LocalDate effectiveDate;
        private String event;
        private Long limit;
        private Long offset;
        private String organizationType;
        private String worker;

        private GetInstances7RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances7RequestBuilder
         */
        public GetInstances7RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set event
         * @param event  (optional)
         * @return GetInstances7RequestBuilder
         */
        public GetInstances7RequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances7RequestBuilder
         */
        public GetInstances7RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances7RequestBuilder
         */
        public GetInstances7RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set organizationType
         * @param organizationType  (optional)
         * @return GetInstances7RequestBuilder
         */
        public GetInstances7RequestBuilder organizationType(String organizationType) {
            this.organizationType = organizationType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances7RequestBuilder
         */
        public GetInstances7RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_7
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_7Call(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }


        /**
         * Execute getInstances_7 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_7WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_7 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_7WithHttpInfo(effectiveDate, event, limit, offset, organizationType, worker);
        }

        /**
         * Execute getInstances_7 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_7Async(effectiveDate, event, limit, offset, organizationType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances7RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances7RequestBuilder getInstances_7() throws IllegalArgumentException {
        return new GetInstances7RequestBuilder();
    }
    private okhttp3.Call getInstances_8Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/frequencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_8ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_8Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_8WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_8ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_8Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_8ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances8RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances8RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances8RequestBuilder
         */
        public GetInstances8RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_8
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_8Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_8 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_8WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_8 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_8WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_8 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_8Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances8RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances8RequestBuilder getInstances_8() throws IllegalArgumentException {
        return new GetInstances8RequestBuilder();
    }
    private okhttp3.Call getInstances_9Call(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/payRateTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_9ValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_9Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_9WithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_9ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_9Async(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_9ValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances9RequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetInstances9RequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetInstances9RequestBuilder
         */
        public GetInstances9RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_9
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_9Call(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getInstances_9 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_9WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_9 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_9WithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getInstances_9 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_9Async(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances9RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances9RequestBuilder getInstances_9() throws IllegalArgumentException {
        return new GetInstances9RequestBuilder();
    }
    private okhttp3.Call getOptionsCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/headcountOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionsValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getOptionsCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getOptionsWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptionsAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOptionsRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetOptionsRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptionsCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getOptions request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getOptionsWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOptions request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getOptionsWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getOptionsAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOptionsRequestBuilder getOptions() throws IllegalArgumentException {
        return new GetOptionsRequestBuilder();
    }
    private okhttp3.Call getProposedPositionsCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/proposedPosition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProposedPositionsValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getProposedPositionsCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getProposedPositionsWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getProposedPositionsValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProposedPositionsAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProposedPositionsValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProposedPositionsRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetProposedPositionsRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetProposedPositionsRequestBuilder
         */
        public GetProposedPositionsRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getProposedPositions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProposedPositionsCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getProposedPositions request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getProposedPositionsWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProposedPositions request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getProposedPositionsWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getProposedPositions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getProposedPositionsAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetProposedPositionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetProposedPositionsRequestBuilder getProposedPositions() throws IllegalArgumentException {
        return new GetProposedPositionsRequestBuilder();
    }
    private okhttp3.Call getSupervisoryOrgValuesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/supervisoryOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupervisoryOrgValuesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getSupervisoryOrgValuesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getSupervisoryOrgValuesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getSupervisoryOrgValuesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSupervisoryOrgValuesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupervisoryOrgValuesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSupervisoryOrgValuesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetSupervisoryOrgValuesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetSupervisoryOrgValuesRequestBuilder
         */
        public GetSupervisoryOrgValuesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getSupervisoryOrgValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSupervisoryOrgValuesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getSupervisoryOrgValues request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getSupervisoryOrgValuesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSupervisoryOrgValues request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getSupervisoryOrgValuesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getSupervisoryOrgValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getSupervisoryOrgValuesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetSupervisoryOrgValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSupervisoryOrgValuesRequestBuilder getSupervisoryOrgValues() throws IllegalArgumentException {
        return new GetSupervisoryOrgValuesRequestBuilder();
    }
    private okhttp3.Call getTimeTypesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/timeTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeTypesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getTimeTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getTimeTypesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getTimeTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeTypesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeTypesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetTimeTypesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetTimeTypesRequestBuilder
         */
        public GetTimeTypesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getTimeTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getTimeTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getTimeTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getTimeTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getTimeTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getTimeTypesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetTimeTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeTypesRequestBuilder getTimeTypes() throws IllegalArgumentException {
        return new GetTimeTypesRequestBuilder();
    }
    private okhttp3.Call getWorkerTypesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/workerTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerTypesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getWorkerTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getWorkerTypesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getWorkerTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkerTypesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerTypesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkerTypesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetWorkerTypesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetWorkerTypesRequestBuilder
         */
        public GetWorkerTypesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getWorkerTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkerTypesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getWorkerTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getWorkerTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkerTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getWorkerTypesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getWorkerTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getWorkerTypesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetWorkerTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkerTypesRequestBuilder getWorkerTypes() throws IllegalArgumentException {
        return new GetWorkerTypesRequestBuilder();
    }
    private okhttp3.Call getWorkspaceInstancesCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/jobChangesGroup/workSpaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (proposedManager != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "proposedManager", proposedManager));
        }

        if (staffingEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffingEvent", staffingEvent));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceInstancesValidateBeforeCall(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback _callback) throws ApiException {
        return getWorkspaceInstancesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getWorkspaceInstancesWithHttpInfo(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceInstancesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkspaceInstancesAsync(LocalDate effectiveDate, String job, Long limit, String location, Long offset, List<String> proposedManager, String staffingEvent, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceInstancesValidateBeforeCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkspaceInstancesRequestBuilder {
        private LocalDate effectiveDate;
        private String job;
        private Long limit;
        private String location;
        private Long offset;
        private List<String> proposedManager;
        private String staffingEvent;
        private String worker;

        private GetWorkspaceInstancesRequestBuilder() {
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder job(String job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set proposedManager
         * @param proposedManager  (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder proposedManager(List<String> proposedManager) {
            this.proposedManager = proposedManager;
            return this;
        }
        
        /**
         * Set staffingEvent
         * @param staffingEvent  (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder staffingEvent(String staffingEvent) {
            this.staffingEvent = staffingEvent;
            return this;
        }
        
        /**
         * Set worker
         * @param worker  (optional)
         * @return GetWorkspaceInstancesRequestBuilder
         */
        public GetWorkspaceInstancesRequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getWorkspaceInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkspaceInstancesCall(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }


        /**
         * Execute getWorkspaceInstances request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getWorkspaceInstancesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkspaceInstances request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getWorkspaceInstancesWithHttpInfo(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker);
        }

        /**
         * Execute getWorkspaceInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getWorkspaceInstancesAsync(effectiveDate, job, limit, location, offset, proposedManager, staffingEvent, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetWorkspaceInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkspaceInstancesRequestBuilder getWorkspaceInstances() throws IllegalArgumentException {
        return new GetWorkspaceInstancesRequestBuilder();
    }
}
