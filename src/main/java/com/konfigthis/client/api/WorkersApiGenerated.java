/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4;
import com.konfigthis.client.model.AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea;
import com.konfigthis.client.model.CheckInArchiveDetail1163fe23102e10001df342088f8a018e;
import com.konfigthis.client.model.CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7;
import com.konfigthis.client.model.CheckInDetail316b5a26cc3c10000ebdb0cb484602e1;
import com.konfigthis.client.model.CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2;
import com.konfigthis.client.model.CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1;
import com.konfigthis.client.model.CheckInTopicDetail3267c0ba92a010001688d79b032b03b8;
import com.konfigthis.client.model.CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015;
import com.konfigthis.client.model.CheckInsSummaryB3a69f47a499100010ce6be72bfe001d;
import com.konfigthis.client.model.CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e;
import com.konfigthis.client.model.DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.ExternalSkillLevelA39462f09c44100005d46fd77ef00000;
import com.konfigthis.client.model.ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000;
import com.konfigthis.client.model.HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621;
import com.konfigthis.client.model.Job75e528a78e9a10000ab7512c5c550115;
import com.konfigthis.client.model.JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111;
import java.time.LocalDate;
import com.konfigthis.client.model.Location75e528a78e9a10000ab75125ebe50114;
import com.konfigthis.client.model.OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e;
import com.konfigthis.client.model.Position99f6257185e61000043aadd66df203bb;
import com.konfigthis.client.model.Reason85deac43cd1a10000b96c80c118f171e;
import com.konfigthis.client.model.ServiceDatesData6b1db753fd82100027b0c8519c860018;
import com.konfigthis.client.model.SkillItem98f198f5056b100019631445471d225f;
import com.konfigthis.client.model.SkillItemAddDefinitionFaed9891d75a10001e9a289910540228;
import com.konfigthis.client.model.SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8;
import com.konfigthis.client.model.SkillItemSourceAddRepresentationC5fabc4ca81610000d5d15309ac90122;
import com.konfigthis.client.model.SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de;
import com.konfigthis.client.model.SupervisoryOrganization75e528a78e9a10000ab75132a9df0116;
import com.konfigthis.client.model.Template2b1b95dfe4af100007f63081aec5158e;
import com.konfigthis.client.model.WorkContactChangeEvent5fca6c96c1c81000142fd03784140113;
import com.konfigthis.client.model.WorkerDataC2466b0778c610000d1936006720000e;
import com.konfigthis.client.model.WorkersGetCheckInTopicsResponse;
import com.konfigthis.client.model.WorkersGetCheckInsResponse;
import com.konfigthis.client.model.WorkersGetCollectionStaffingResponse;
import com.konfigthis.client.model.WorkersGetExplicitSkillsResponse;
import com.konfigthis.client.model.WorkersGetExternalSkillLevelResponse;
import com.konfigthis.client.model.WorkersGetServiceDatesResponse;
import com.konfigthis.client.model.WorkersGetSkillItemsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCheckInCall(String ID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInDetail316b5a26cc3c10000ebdb0cb484602e1;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkIns"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckInValidateBeforeCall(String ID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createCheckIn(Async)");
        }

        // verify the required parameter 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1' is set
        if (checkInDetail316b5a26cc3c10000ebdb0cb484602e1 == null) {
            throw new ApiException("Missing the required parameter 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1' when calling createCheckIn(Async)");
        }

        return createCheckInCall(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);

    }


    private ApiResponse<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> createCheckInWithHttpInfo(String ID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1) throws ApiException {
        okhttp3.Call localVarCall = createCheckInValidateBeforeCall(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, null);
        Type localVarReturnType = new TypeToken<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCheckInAsync(String ID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1, final ApiCallback<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckInValidateBeforeCall(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);
        Type localVarReturnType = new TypeToken<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCheckInRequestBuilder {
        private final String ID;
        private String description;
        private List<AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea> associatedTopics;
        private LocalDate date;
        private List<CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7> checkInAttachments;
        private String id;

        private CreateCheckInRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set description
         * @param description Description of check-in. (optional)
         * @return CreateCheckInRequestBuilder
         */
        public CreateCheckInRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set associatedTopics
         * @param associatedTopics Topics included in a check-in. (optional)
         * @return CreateCheckInRequestBuilder
         */
        public CreateCheckInRequestBuilder associatedTopics(List<AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea> associatedTopics) {
            this.associatedTopics = associatedTopics;
            return this;
        }
        
        /**
         * Set date
         * @param date Date of check-in. (optional)
         * @return CreateCheckInRequestBuilder
         */
        public CreateCheckInRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set checkInAttachments
         * @param checkInAttachments Returns all attachments for the Check-In. (optional)
         * @return CreateCheckInRequestBuilder
         */
        public CreateCheckInRequestBuilder checkInAttachments(List<CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7> checkInAttachments) {
            this.checkInAttachments = checkInAttachments;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateCheckInRequestBuilder
         */
        public CreateCheckInRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createCheckIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            return createCheckInCall(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);
        }

        private CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 buildBodyParams() {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = new CheckInDetail316b5a26cc3c10000ebdb0cb484602e1();
            return checkInDetail316b5a26cc3c10000ebdb0cb484602e1;
        }

        /**
         * Execute createCheckIn request
         * @return CheckInDetail316b5a26cc3c10000ebdb0cb484602e1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 execute() throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            ApiResponse<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> localVarResp = createCheckInWithHttpInfo(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCheckIn request with HTTP info returned
         * @return ApiResponse&lt;CheckInDetail316b5a26cc3c10000ebdb0cb484602e1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> executeWithHttpInfo() throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            return createCheckInWithHttpInfo(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1);
        }

        /**
         * Execute createCheckIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> _callback) throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            return createCheckInAsync(ID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);
        }
    }

    /**
     * Creates Check-Ins.
     * Creates a single Check-In instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least the required field: date.    This endpoint is equivalent to the Create Check-In task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param checkInDetail316b5a26cc3c10000ebdb0cb484602e1  (required)
     * @return CreateCheckInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCheckInRequestBuilder createCheckIn(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateCheckInRequestBuilder(ID);
    }
    private okhttp3.Call createCheckInTopicCall(String ID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInTopicDetail3267c0ba92a010001688d79b032b03b8;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkInTopics"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckInTopicValidateBeforeCall(String ID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createCheckInTopic(Async)");
        }

        // verify the required parameter 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8' is set
        if (checkInTopicDetail3267c0ba92a010001688d79b032b03b8 == null) {
            throw new ApiException("Missing the required parameter 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8' when calling createCheckInTopic(Async)");
        }

        return createCheckInTopicCall(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);

    }


    private ApiResponse<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> createCheckInTopicWithHttpInfo(String ID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8) throws ApiException {
        okhttp3.Call localVarCall = createCheckInTopicValidateBeforeCall(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, null);
        Type localVarReturnType = new TypeToken<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCheckInTopicAsync(String ID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8, final ApiCallback<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckInTopicValidateBeforeCall(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);
        Type localVarReturnType = new TypeToken<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCheckInTopicRequestBuilder {
        private final String ID;
        private String sharedNotes;
        private List<AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4> associatedCheckIns;
        private String privateNotes;
        private String name;
        private List<CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1> checkInTopicAttachments;
        private String id;

        private CreateCheckInTopicRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set sharedNotes
         * @param sharedNotes Shared notes of the topic. (optional)
         * @return CreateCheckInTopicRequestBuilder
         */
        public CreateCheckInTopicRequestBuilder sharedNotes(String sharedNotes) {
            this.sharedNotes = sharedNotes;
            return this;
        }
        
        /**
         * Set associatedCheckIns
         * @param associatedCheckIns Check-ins associated to topic. (optional)
         * @return CreateCheckInTopicRequestBuilder
         */
        public CreateCheckInTopicRequestBuilder associatedCheckIns(List<AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4> associatedCheckIns) {
            this.associatedCheckIns = associatedCheckIns;
            return this;
        }
        
        /**
         * Set privateNotes
         * @param privateNotes Personal notes of the topic. (optional)
         * @return CreateCheckInTopicRequestBuilder
         */
        public CreateCheckInTopicRequestBuilder privateNotes(String privateNotes) {
            this.privateNotes = privateNotes;
            return this;
        }
        
        /**
         * Set name
         * @param name Topic name. (optional)
         * @return CreateCheckInTopicRequestBuilder
         */
        public CreateCheckInTopicRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set checkInTopicAttachments
         * @param checkInTopicAttachments Returns all attachments for the Check-In Topic. (optional)
         * @return CreateCheckInTopicRequestBuilder
         */
        public CreateCheckInTopicRequestBuilder checkInTopicAttachments(List<CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1> checkInTopicAttachments) {
            this.checkInTopicAttachments = checkInTopicAttachments;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateCheckInTopicRequestBuilder
         */
        public CreateCheckInTopicRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createCheckInTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            return createCheckInTopicCall(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);
        }

        private CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 buildBodyParams() {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = new CheckInTopicDetail3267c0ba92a010001688d79b032b03b8();
            return checkInTopicDetail3267c0ba92a010001688d79b032b03b8;
        }

        /**
         * Execute createCheckInTopic request
         * @return CheckInTopicDetail3267c0ba92a010001688d79b032b03b8
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 execute() throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            ApiResponse<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> localVarResp = createCheckInTopicWithHttpInfo(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCheckInTopic request with HTTP info returned
         * @return ApiResponse&lt;CheckInTopicDetail3267c0ba92a010001688d79b032b03b8&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> executeWithHttpInfo() throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            return createCheckInTopicWithHttpInfo(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8);
        }

        /**
         * Execute createCheckInTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> _callback) throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            return createCheckInTopicAsync(ID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);
        }
    }

    /**
     * Creates Check-In topics.
     * Creates a single Check-In topic instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least these required fields: name.   This endpoint is equivalent to the Create Check-In Topic task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param checkInTopicDetail3267c0ba92a010001688d79b032b03b8  (required)
     * @return CreateCheckInTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCheckInTopicRequestBuilder createCheckInTopic(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateCheckInTopicRequestBuilder(ID);
    }
    private okhttp3.Call createExternalSkillLevelsCall(String ID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalSkillLevelA39462f09c44100005d46fd77ef00000;

        // create path and map variables
        String localVarPath = "/workers/{ID}/externalSkillLevel"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExternalSkillLevelsValidateBeforeCall(String ID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createExternalSkillLevels(Async)");
        }

        // verify the required parameter 'externalSkillLevelA39462f09c44100005d46fd77ef00000' is set
        if (externalSkillLevelA39462f09c44100005d46fd77ef00000 == null) {
            throw new ApiException("Missing the required parameter 'externalSkillLevelA39462f09c44100005d46fd77ef00000' when calling createExternalSkillLevels(Async)");
        }

        return createExternalSkillLevelsCall(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);

    }


    private ApiResponse<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> createExternalSkillLevelsWithHttpInfo(String ID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000) throws ApiException {
        okhttp3.Call localVarCall = createExternalSkillLevelsValidateBeforeCall(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000, null);
        Type localVarReturnType = new TypeToken<ExternalSkillLevelA39462f09c44100005d46fd77ef00000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createExternalSkillLevelsAsync(String ID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000, final ApiCallback<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExternalSkillLevelsValidateBeforeCall(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);
        Type localVarReturnType = new TypeToken<ExternalSkillLevelA39462f09c44100005d46fd77ef00000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateExternalSkillLevelsRequestBuilder {
        private final String ID;
        private Integer externalSkillLevel;
        private String externalSkillId;
        private LocalDate effectiveMoment;
        private String context;
        private String id;

        private CreateExternalSkillLevelsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set externalSkillLevel
         * @param externalSkillLevel The skill level normalized to a scale from 1-5 and to 1 decimal place. (optional)
         * @return CreateExternalSkillLevelsRequestBuilder
         */
        public CreateExternalSkillLevelsRequestBuilder externalSkillLevel(Integer externalSkillLevel) {
            this.externalSkillLevel = externalSkillLevel;
            return this;
        }
        
        /**
         * Set externalSkillId
         * @param externalSkillId The skill from the external system. (optional)
         * @return CreateExternalSkillLevelsRequestBuilder
         */
        public CreateExternalSkillLevelsRequestBuilder externalSkillId(String externalSkillId) {
            this.externalSkillId = externalSkillId;
            return this;
        }
        
        /**
         * Set effectiveMoment
         * @param effectiveMoment The date that the external Skill Level was last updated. (optional)
         * @return CreateExternalSkillLevelsRequestBuilder
         */
        public CreateExternalSkillLevelsRequestBuilder effectiveMoment(LocalDate effectiveMoment) {
            this.effectiveMoment = effectiveMoment;
            return this;
        }
        
        /**
         * Set context
         * @param context The text you enter to provide context for this external skill load. Not visible to end users. (optional)
         * @return CreateExternalSkillLevelsRequestBuilder
         */
        public CreateExternalSkillLevelsRequestBuilder context(String context) {
            this.context = context;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateExternalSkillLevelsRequestBuilder
         */
        public CreateExternalSkillLevelsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createExternalSkillLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            return createExternalSkillLevelsCall(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);
        }

        private ExternalSkillLevelA39462f09c44100005d46fd77ef00000 buildBodyParams() {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = new ExternalSkillLevelA39462f09c44100005d46fd77ef00000();
            return externalSkillLevelA39462f09c44100005d46fd77ef00000;
        }

        /**
         * Execute createExternalSkillLevels request
         * @return ExternalSkillLevelA39462f09c44100005d46fd77ef00000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ExternalSkillLevelA39462f09c44100005d46fd77ef00000 execute() throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            ApiResponse<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> localVarResp = createExternalSkillLevelsWithHttpInfo(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createExternalSkillLevels request with HTTP info returned
         * @return ApiResponse&lt;ExternalSkillLevelA39462f09c44100005d46fd77ef00000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> executeWithHttpInfo() throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            return createExternalSkillLevelsWithHttpInfo(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000);
        }

        /**
         * Execute createExternalSkillLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> _callback) throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            return createExternalSkillLevelsAsync(ID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);
        }
    }

    /**
     * Creates external skill levels.
     * Creates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param externalSkillLevelA39462f09c44100005d46fd77ef00000  (required)
     * @return CreateExternalSkillLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateExternalSkillLevelsRequestBuilder createExternalSkillLevels(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateExternalSkillLevelsRequestBuilder(ID);
    }
    private okhttp3.Call createHomeContactChangeProcessCall(String ID, HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621;

        // create path and map variables
        String localVarPath = "/workers/{ID}/homeContactInformationChanges"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHomeContactChangeProcessValidateBeforeCall(String ID, HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createHomeContactChangeProcess(Async)");
        }

        // verify the required parameter 'homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621' is set
        if (homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 == null) {
            throw new ApiException("Missing the required parameter 'homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621' when calling createHomeContactChangeProcess(Async)");
        }

        return createHomeContactChangeProcessCall(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, _callback);

    }


    private ApiResponse<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> createHomeContactChangeProcessWithHttpInfo(String ID, HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621) throws ApiException {
        okhttp3.Call localVarCall = createHomeContactChangeProcessValidateBeforeCall(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, null);
        Type localVarReturnType = new TypeToken<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createHomeContactChangeProcessAsync(String ID, HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, final ApiCallback<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHomeContactChangeProcessValidateBeforeCall(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, _callback);
        Type localVarReturnType = new TypeToken<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateHomeContactChangeProcessRequestBuilder {
        private final String ID;
        private String href;
        private LocalDate effectiveDate;
        private String id;
        private String descriptor;

        private CreateHomeContactChangeProcessRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set href
         * @param href The URL to the related change home contact information resource where this event can be interacted with via REST (optional)
         * @return CreateHomeContactChangeProcessRequestBuilder
         */
        public CreateHomeContactChangeProcessRequestBuilder href(String href) {
            this.href = href;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this business process takes effect. (optional)
         * @return CreateHomeContactChangeProcessRequestBuilder
         */
        public CreateHomeContactChangeProcessRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateHomeContactChangeProcessRequestBuilder
         */
        public CreateHomeContactChangeProcessRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return CreateHomeContactChangeProcessRequestBuilder
         */
        public CreateHomeContactChangeProcessRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for createHomeContactChangeProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 = buildBodyParams();
            return createHomeContactChangeProcessCall(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, _callback);
        }

        private HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 buildBodyParams() {
            HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 = new HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621();
            return homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621;
        }

        /**
         * Execute createHomeContactChangeProcess request
         * @return HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 execute() throws ApiException {
            HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 = buildBodyParams();
            ApiResponse<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> localVarResp = createHomeContactChangeProcessWithHttpInfo(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createHomeContactChangeProcess request with HTTP info returned
         * @return ApiResponse&lt;HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> executeWithHttpInfo() throws ApiException {
            HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 = buildBodyParams();
            return createHomeContactChangeProcessWithHttpInfo(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621);
        }

        /**
         * Execute createHomeContactChangeProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> _callback) throws ApiException {
            HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 = buildBodyParams();
            return createHomeContactChangeProcessAsync(ID, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, _callback);
        }
    }

    /**
     * 
     * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621  (required)
     * @return CreateHomeContactChangeProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateHomeContactChangeProcessRequestBuilder createHomeContactChangeProcess(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateHomeContactChangeProcessRequestBuilder(ID);
    }
    private okhttp3.Call createSkillItemCall(String ID, SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de;

        // create path and map variables
        String localVarPath = "/workers/{ID}/skillItems"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSkillItemValidateBeforeCall(String ID, SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createSkillItem(Async)");
        }

        // verify the required parameter 'skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de' is set
        if (skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de == null) {
            throw new ApiException("Missing the required parameter 'skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de' when calling createSkillItem(Async)");
        }

        return createSkillItemCall(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, _callback);

    }


    private ApiResponse<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de> createSkillItemWithHttpInfo(String ID, SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de) throws ApiException {
        okhttp3.Call localVarCall = createSkillItemValidateBeforeCall(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, null);
        Type localVarReturnType = new TypeToken<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSkillItemAsync(String ID, SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, final ApiCallback<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSkillItemValidateBeforeCall(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, _callback);
        Type localVarReturnType = new TypeToken<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSkillItemRequestBuilder {
        private final String ID;
        private List<SkillItemAddDefinitionFaed9891d75a10001e9a289910540228> skillItems;

        private CreateSkillItemRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set skillItems
         * @param skillItems Exposes Skill Items for a Skill Qualification Enabled. (optional)
         * @return CreateSkillItemRequestBuilder
         */
        public CreateSkillItemRequestBuilder skillItems(List<SkillItemAddDefinitionFaed9891d75a10001e9a289910540228> skillItems) {
            this.skillItems = skillItems;
            return this;
        }
        
        /**
         * Build call for createSkillItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de = buildBodyParams();
            return createSkillItemCall(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, _callback);
        }

        private SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de buildBodyParams() {
            SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de = new SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de();
            return skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de;
        }

        /**
         * Execute createSkillItem request
         * @return SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de execute() throws ApiException {
            SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de = buildBodyParams();
            ApiResponse<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de> localVarResp = createSkillItemWithHttpInfo(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSkillItem request with HTTP info returned
         * @return ApiResponse&lt;SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de> executeWithHttpInfo() throws ApiException {
            SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de = buildBodyParams();
            return createSkillItemWithHttpInfo(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de);
        }

        /**
         * Execute createSkillItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de> _callback) throws ApiException {
            SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de = buildBodyParams();
            return createSkillItemAsync(ID, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, _callback);
        }
    }

    /**
     * 
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de  (required)
     * @return CreateSkillItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSkillItemRequestBuilder createSkillItem(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateSkillItemRequestBuilder(ID);
    }
    private okhttp3.Call createWorkContactInformationChangesCall(String ID, WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workContactChangeEvent5fca6c96c1c81000142fd03784140113;

        // create path and map variables
        String localVarPath = "/workers/{ID}/workContactInformationChanges"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkContactInformationChangesValidateBeforeCall(String ID, WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createWorkContactInformationChanges(Async)");
        }

        // verify the required parameter 'workContactChangeEvent5fca6c96c1c81000142fd03784140113' is set
        if (workContactChangeEvent5fca6c96c1c81000142fd03784140113 == null) {
            throw new ApiException("Missing the required parameter 'workContactChangeEvent5fca6c96c1c81000142fd03784140113' when calling createWorkContactInformationChanges(Async)");
        }

        return createWorkContactInformationChangesCall(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113, _callback);

    }


    private ApiResponse<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> createWorkContactInformationChangesWithHttpInfo(String ID, WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113) throws ApiException {
        okhttp3.Call localVarCall = createWorkContactInformationChangesValidateBeforeCall(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113, null);
        Type localVarReturnType = new TypeToken<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWorkContactInformationChangesAsync(String ID, WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113, final ApiCallback<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkContactInformationChangesValidateBeforeCall(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113, _callback);
        Type localVarReturnType = new TypeToken<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWorkContactInformationChangesRequestBuilder {
        private final String ID;
        private LocalDate effectiveDate;
        private String href;
        private String id;
        private String descriptor;

        private CreateWorkContactInformationChangesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set effectiveDate
         * @param effectiveDate The date this business process takes effect. (optional)
         * @return CreateWorkContactInformationChangesRequestBuilder
         */
        public CreateWorkContactInformationChangesRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set href
         * @param href The URL to the related change work contact information resource where this event can be interacted with via REST. (optional)
         * @return CreateWorkContactInformationChangesRequestBuilder
         */
        public CreateWorkContactInformationChangesRequestBuilder href(String href) {
            this.href = href;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateWorkContactInformationChangesRequestBuilder
         */
        public CreateWorkContactInformationChangesRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return CreateWorkContactInformationChangesRequestBuilder
         */
        public CreateWorkContactInformationChangesRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for createWorkContactInformationChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113 = buildBodyParams();
            return createWorkContactInformationChangesCall(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113, _callback);
        }

        private WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 buildBodyParams() {
            WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113 = new WorkContactChangeEvent5fca6c96c1c81000142fd03784140113();
            return workContactChangeEvent5fca6c96c1c81000142fd03784140113;
        }

        /**
         * Execute createWorkContactInformationChanges request
         * @return WorkContactChangeEvent5fca6c96c1c81000142fd03784140113
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 execute() throws ApiException {
            WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113 = buildBodyParams();
            ApiResponse<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> localVarResp = createWorkContactInformationChangesWithHttpInfo(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWorkContactInformationChanges request with HTTP info returned
         * @return ApiResponse&lt;WorkContactChangeEvent5fca6c96c1c81000142fd03784140113&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> executeWithHttpInfo() throws ApiException {
            WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113 = buildBodyParams();
            return createWorkContactInformationChangesWithHttpInfo(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113);
        }

        /**
         * Execute createWorkContactInformationChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> _callback) throws ApiException {
            WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 workContactChangeEvent5fca6c96c1c81000142fd03784140113 = buildBodyParams();
            return createWorkContactInformationChangesAsync(ID, workContactChangeEvent5fca6c96c1c81000142fd03784140113, _callback);
        }
    }

    /**
     * 
     * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param workContactChangeEvent5fca6c96c1c81000142fd03784140113  (required)
     * @return CreateWorkContactInformationChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWorkContactInformationChangesRequestBuilder createWorkContactInformationChanges(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateWorkContactInformationChangesRequestBuilder(ID);
    }
    private okhttp3.Call deleteCheckInCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkIns/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCheckInValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling deleteCheckIn(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling deleteCheckIn(Async)");
        }

        return deleteCheckInCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> deleteCheckInWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckInValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCheckInAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckInValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCheckInRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private DeleteCheckInRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for deleteCheckIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCheckInCall(ID, subresourceID, _callback);
        }


        /**
         * Execute deleteCheckIn request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCheckInWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute deleteCheckIn request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCheckInWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute deleteCheckIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCheckInAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Deletes an existing Check-In instance.
     * Deletes an existing Check-In instance with the specified ID. This can only be done by the creater of the Check-In.    This endpoint is equivalent to the Delete Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return DeleteCheckInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCheckInRequestBuilder deleteCheckIn(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new DeleteCheckInRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call deleteCheckInTopicCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkInTopics/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCheckInTopicValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling deleteCheckInTopic(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling deleteCheckInTopic(Async)");
        }

        return deleteCheckInTopicCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> deleteCheckInTopicWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckInTopicValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCheckInTopicAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckInTopicValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCheckInTopicRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private DeleteCheckInTopicRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for deleteCheckInTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCheckInTopicCall(ID, subresourceID, _callback);
        }


        /**
         * Execute deleteCheckInTopic request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCheckInTopicWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute deleteCheckInTopic request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCheckInTopicWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute deleteCheckInTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCheckInTopicAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Deletes an existing Check-In topic instance.
     * Deletes an existing Check-In topic instance with the specified ID. This can only be done by the creater of the Check-In topic.   This endpoint is equivalent to the Delete Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return DeleteCheckInTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCheckInTopicRequestBuilder deleteCheckInTopic(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new DeleteCheckInTopicRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getCheckInCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkIns/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckInValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getCheckIn(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getCheckIn(Async)");
        }

        return getCheckInCall(ID, subresourceID, _callback);

    }


    private ApiResponse<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d> getCheckInWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getCheckInValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckInAsync(String ID, String subresourceID, final ApiCallback<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckInValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCheckInRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetCheckInRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getCheckIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckInCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getCheckIn request
         * @return CheckInsSummaryB3a69f47a499100010ce6be72bfe001d
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInsSummaryB3a69f47a499100010ce6be72bfe001d execute() throws ApiException {
            ApiResponse<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d> localVarResp = getCheckInWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCheckIn request with HTTP info returned
         * @return ApiResponse&lt;CheckInsSummaryB3a69f47a499100010ce6be72bfe001d&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d> executeWithHttpInfo() throws ApiException {
            return getCheckInWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getCheckIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d> _callback) throws ApiException {
            return getCheckInAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single Check-In instance.
     * Retrieves a Check-In with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetCheckInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckInRequestBuilder getCheckIn(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetCheckInRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getCheckInTopicCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkInTopics/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckInTopicValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getCheckInTopic(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getCheckInTopic(Async)");
        }

        return getCheckInTopicCall(ID, subresourceID, _callback);

    }


    private ApiResponse<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015> getCheckInTopicWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getCheckInTopicValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckInTopicAsync(String ID, String subresourceID, final ApiCallback<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckInTopicValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCheckInTopicRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetCheckInTopicRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getCheckInTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckInTopicCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getCheckInTopic request
         * @return CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015 execute() throws ApiException {
            ApiResponse<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015> localVarResp = getCheckInTopicWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCheckInTopic request with HTTP info returned
         * @return ApiResponse&lt;CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015> executeWithHttpInfo() throws ApiException {
            return getCheckInTopicWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getCheckInTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015> _callback) throws ApiException {
            return getCheckInTopicAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single Check-In topic instance.
     * Retrieves a Check-In topic with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetCheckInTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckInTopicRequestBuilder getCheckInTopic(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetCheckInTopicRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getCheckInTopicsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkInTopics"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckInTopicsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getCheckInTopics(Async)");
        }

        return getCheckInTopicsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetCheckInTopicsResponse> getCheckInTopicsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getCheckInTopicsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetCheckInTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckInTopicsAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetCheckInTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckInTopicsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetCheckInTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCheckInTopicsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetCheckInTopicsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCheckInTopicsRequestBuilder
         */
        public GetCheckInTopicsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCheckInTopicsRequestBuilder
         */
        public GetCheckInTopicsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCheckInTopics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckInTopicsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getCheckInTopics request
         * @return WorkersGetCheckInTopicsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetCheckInTopicsResponse execute() throws ApiException {
            ApiResponse<WorkersGetCheckInTopicsResponse> localVarResp = getCheckInTopicsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCheckInTopics request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetCheckInTopicsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetCheckInTopicsResponse> executeWithHttpInfo() throws ApiException {
            return getCheckInTopicsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getCheckInTopics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetCheckInTopicsResponse> _callback) throws ApiException {
            return getCheckInTopicsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of Check-Ins topics.
     * Retrieves all Check-In topics for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @return GetCheckInTopicsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckInTopicsRequestBuilder getCheckInTopics(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetCheckInTopicsRequestBuilder(ID);
    }
    private okhttp3.Call getCheckInsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkIns"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckInsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getCheckIns(Async)");
        }

        return getCheckInsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetCheckInsResponse> getCheckInsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getCheckInsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetCheckInsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckInsAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetCheckInsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckInsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetCheckInsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCheckInsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetCheckInsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCheckInsRequestBuilder
         */
        public GetCheckInsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCheckInsRequestBuilder
         */
        public GetCheckInsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCheckIns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckInsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getCheckIns request
         * @return WorkersGetCheckInsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetCheckInsResponse execute() throws ApiException {
            ApiResponse<WorkersGetCheckInsResponse> localVarResp = getCheckInsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCheckIns request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetCheckInsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetCheckInsResponse> executeWithHttpInfo() throws ApiException {
            return getCheckInsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getCheckIns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetCheckInsResponse> _callback) throws ApiException {
            return getCheckInsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of Check-Ins.
     * Retrieves all Check-Ins for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.   This endpoint is equivalent to the View Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @return GetCheckInsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckInsRequestBuilder getCheckIns(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetCheckInsRequestBuilder(ID);
    }
    private okhttp3.Call getCollectionStaffingCall(Boolean includeTerminatedWorkers, Long limit, Long offset, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTerminatedWorkers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTerminatedWorkers", includeTerminatedWorkers));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionStaffingValidateBeforeCall(Boolean includeTerminatedWorkers, Long limit, Long offset, String search, final ApiCallback _callback) throws ApiException {
        return getCollectionStaffingCall(includeTerminatedWorkers, limit, offset, search, _callback);

    }


    private ApiResponse<WorkersGetCollectionStaffingResponse> getCollectionStaffingWithHttpInfo(Boolean includeTerminatedWorkers, Long limit, Long offset, String search) throws ApiException {
        okhttp3.Call localVarCall = getCollectionStaffingValidateBeforeCall(includeTerminatedWorkers, limit, offset, search, null);
        Type localVarReturnType = new TypeToken<WorkersGetCollectionStaffingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionStaffingAsync(Boolean includeTerminatedWorkers, Long limit, Long offset, String search, final ApiCallback<WorkersGetCollectionStaffingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionStaffingValidateBeforeCall(includeTerminatedWorkers, limit, offset, search, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetCollectionStaffingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionStaffingRequestBuilder {
        private Boolean includeTerminatedWorkers;
        private Long limit;
        private Long offset;
        private String search;

        private GetCollectionStaffingRequestBuilder() {
        }

        /**
         * Set includeTerminatedWorkers
         * @param includeTerminatedWorkers Include terminated workers in the output (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder includeTerminatedWorkers(Boolean includeTerminatedWorkers) {
            this.includeTerminatedWorkers = includeTerminatedWorkers;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set search
         * @param search Searches workers by name or worker ID. The search is case-insensitive. You can include space-delimited search strings for an OR search. (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getCollectionStaffing
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionStaffingCall(includeTerminatedWorkers, limit, offset, search, _callback);
        }


        /**
         * Execute getCollectionStaffing request
         * @return WorkersGetCollectionStaffingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetCollectionStaffingResponse execute() throws ApiException {
            ApiResponse<WorkersGetCollectionStaffingResponse> localVarResp = getCollectionStaffingWithHttpInfo(includeTerminatedWorkers, limit, offset, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionStaffing request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetCollectionStaffingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetCollectionStaffingResponse> executeWithHttpInfo() throws ApiException {
            return getCollectionStaffingWithHttpInfo(includeTerminatedWorkers, limit, offset, search);
        }

        /**
         * Execute getCollectionStaffing request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetCollectionStaffingResponse> _callback) throws ApiException {
            return getCollectionStaffingAsync(includeTerminatedWorkers, limit, offset, search, _callback);
        }
    }

    /**
     * Retrieves a collection of workers and current staffing information.
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @return GetCollectionStaffingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionStaffingRequestBuilder getCollectionStaffing() throws IllegalArgumentException {
        return new GetCollectionStaffingRequestBuilder();
    }
    private okhttp3.Call getExplicitSkillsCall(String ID, Long limit, Long offset, String skill, String skillSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/explicitSkills"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (skill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skill", skill));
        }

        if (skillSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skillSource", skillSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExplicitSkillsValidateBeforeCall(String ID, Long limit, Long offset, String skill, String skillSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getExplicitSkills(Async)");
        }

        return getExplicitSkillsCall(ID, limit, offset, skill, skillSource, _callback);

    }


    private ApiResponse<WorkersGetExplicitSkillsResponse> getExplicitSkillsWithHttpInfo(String ID, Long limit, Long offset, String skill, String skillSource) throws ApiException {
        okhttp3.Call localVarCall = getExplicitSkillsValidateBeforeCall(ID, limit, offset, skill, skillSource, null);
        Type localVarReturnType = new TypeToken<WorkersGetExplicitSkillsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExplicitSkillsAsync(String ID, Long limit, Long offset, String skill, String skillSource, final ApiCallback<WorkersGetExplicitSkillsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExplicitSkillsValidateBeforeCall(ID, limit, offset, skill, skillSource, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetExplicitSkillsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExplicitSkillsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private String skill;
        private String skillSource;

        private GetExplicitSkillsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetExplicitSkillsRequestBuilder
         */
        public GetExplicitSkillsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetExplicitSkillsRequestBuilder
         */
        public GetExplicitSkillsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set skill
         * @param skill Retrieves the skills for the specified skill name. (optional)
         * @return GetExplicitSkillsRequestBuilder
         */
        public GetExplicitSkillsRequestBuilder skill(String skill) {
            this.skill = skill;
            return this;
        }
        
        /**
         * Set skillSource
         * @param skillSource The Workday ID of the skill source. Returns skills associated with the skill source. (optional)
         * @return GetExplicitSkillsRequestBuilder
         */
        public GetExplicitSkillsRequestBuilder skillSource(String skillSource) {
            this.skillSource = skillSource;
            return this;
        }
        
        /**
         * Build call for getExplicitSkills
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExplicitSkillsCall(ID, limit, offset, skill, skillSource, _callback);
        }


        /**
         * Execute getExplicitSkills request
         * @return WorkersGetExplicitSkillsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetExplicitSkillsResponse execute() throws ApiException {
            ApiResponse<WorkersGetExplicitSkillsResponse> localVarResp = getExplicitSkillsWithHttpInfo(ID, limit, offset, skill, skillSource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExplicitSkills request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetExplicitSkillsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetExplicitSkillsResponse> executeWithHttpInfo() throws ApiException {
            return getExplicitSkillsWithHttpInfo(ID, limit, offset, skill, skillSource);
        }

        /**
         * Execute getExplicitSkills request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetExplicitSkillsResponse> _callback) throws ApiException {
            return getExplicitSkillsAsync(ID, limit, offset, skill, skillSource, _callback);
        }
    }

    /**
     * Get Explicit Skills for Skill Enabled
     * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetExplicitSkillsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetExplicitSkillsRequestBuilder getExplicitSkills(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetExplicitSkillsRequestBuilder(ID);
    }
    private okhttp3.Call getExplicitSkillsForSkillEnabledCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/explicitSkills/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExplicitSkillsForSkillEnabledValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getExplicitSkillsForSkillEnabled(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getExplicitSkillsForSkillEnabled(Async)");
        }

        return getExplicitSkillsForSkillEnabledCall(ID, subresourceID, _callback);

    }


    private ApiResponse<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> getExplicitSkillsForSkillEnabledWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getExplicitSkillsForSkillEnabledValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExplicitSkillsForSkillEnabledAsync(String ID, String subresourceID, final ApiCallback<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExplicitSkillsForSkillEnabledValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExplicitSkillsForSkillEnabledRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetExplicitSkillsForSkillEnabledRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getExplicitSkillsForSkillEnabled
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExplicitSkillsForSkillEnabledCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getExplicitSkillsForSkillEnabled request
         * @return DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8 execute() throws ApiException {
            ApiResponse<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> localVarResp = getExplicitSkillsForSkillEnabledWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExplicitSkillsForSkillEnabled request with HTTP info returned
         * @return ApiResponse&lt;DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> executeWithHttpInfo() throws ApiException {
            return getExplicitSkillsForSkillEnabledWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getExplicitSkillsForSkillEnabled request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> _callback) throws ApiException {
            return getExplicitSkillsForSkillEnabledAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Get Explicit Skills for Skill Enabled
     * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetExplicitSkillsForSkillEnabledRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetExplicitSkillsForSkillEnabledRequestBuilder getExplicitSkillsForSkillEnabled(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetExplicitSkillsForSkillEnabledRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getExternalSkillLevelCall(String ID, String externalSkillId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/externalSkillLevel"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalSkillId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalSkillId", externalSkillId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExternalSkillLevelValidateBeforeCall(String ID, String externalSkillId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getExternalSkillLevel(Async)");
        }

        return getExternalSkillLevelCall(ID, externalSkillId, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetExternalSkillLevelResponse> getExternalSkillLevelWithHttpInfo(String ID, String externalSkillId, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getExternalSkillLevelValidateBeforeCall(ID, externalSkillId, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetExternalSkillLevelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExternalSkillLevelAsync(String ID, String externalSkillId, Long limit, Long offset, final ApiCallback<WorkersGetExternalSkillLevelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExternalSkillLevelValidateBeforeCall(ID, externalSkillId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetExternalSkillLevelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExternalSkillLevelRequestBuilder {
        private final String ID;
        private String externalSkillId;
        private Long limit;
        private Long offset;

        private GetExternalSkillLevelRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set externalSkillId
         * @param externalSkillId All External Skills. If passed, the External Skill Level associated with the External Skill ID. (optional)
         * @return GetExternalSkillLevelRequestBuilder
         */
        public GetExternalSkillLevelRequestBuilder externalSkillId(String externalSkillId) {
            this.externalSkillId = externalSkillId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetExternalSkillLevelRequestBuilder
         */
        public GetExternalSkillLevelRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetExternalSkillLevelRequestBuilder
         */
        public GetExternalSkillLevelRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getExternalSkillLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExternalSkillLevelCall(ID, externalSkillId, limit, offset, _callback);
        }


        /**
         * Execute getExternalSkillLevel request
         * @return WorkersGetExternalSkillLevelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetExternalSkillLevelResponse execute() throws ApiException {
            ApiResponse<WorkersGetExternalSkillLevelResponse> localVarResp = getExternalSkillLevelWithHttpInfo(ID, externalSkillId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExternalSkillLevel request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetExternalSkillLevelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetExternalSkillLevelResponse> executeWithHttpInfo() throws ApiException {
            return getExternalSkillLevelWithHttpInfo(ID, externalSkillId, limit, offset);
        }

        /**
         * Execute getExternalSkillLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetExternalSkillLevelResponse> _callback) throws ApiException {
            return getExternalSkillLevelAsync(ID, externalSkillId, limit, offset, _callback);
        }
    }

    /**
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetExternalSkillLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetExternalSkillLevelRequestBuilder getExternalSkillLevel(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetExternalSkillLevelRequestBuilder(ID);
    }
    private okhttp3.Call getExternalSkillLevelsCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/externalSkillLevel/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExternalSkillLevelsValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getExternalSkillLevels(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getExternalSkillLevels(Async)");
        }

        return getExternalSkillLevelsCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000> getExternalSkillLevelsWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getExternalSkillLevelsValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExternalSkillLevelsAsync(String ID, String subresourceID, final ApiCallback<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExternalSkillLevelsValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetExternalSkillLevelsRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetExternalSkillLevelsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getExternalSkillLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExternalSkillLevelsCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getExternalSkillLevels request
         * @return ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000 execute() throws ApiException {
            ApiResponse<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000> localVarResp = getExternalSkillLevelsWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getExternalSkillLevels request with HTTP info returned
         * @return ApiResponse&lt;ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000> executeWithHttpInfo() throws ApiException {
            return getExternalSkillLevelsWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getExternalSkillLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000> _callback) throws ApiException {
            return getExternalSkillLevelsAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetExternalSkillLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetExternalSkillLevelsRequestBuilder getExternalSkillLevels(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetExternalSkillLevelsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getHomeContactChangeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/homeContactInformationChanges/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeContactChangeValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeContactChange(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getHomeContactChange(Async)");
        }

        return getHomeContactChangeCall(ID, subresourceID, _callback);

    }


    private ApiResponse<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> getHomeContactChangeWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getHomeContactChangeValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeContactChangeAsync(String ID, String subresourceID, final ApiCallback<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeContactChangeValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeContactChangeRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetHomeContactChangeRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getHomeContactChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeContactChangeCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getHomeContactChange request
         * @return HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 execute() throws ApiException {
            ApiResponse<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> localVarResp = getHomeContactChangeWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeContactChange request with HTTP info returned
         * @return ApiResponse&lt;HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> executeWithHttpInfo() throws ApiException {
            return getHomeContactChangeWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getHomeContactChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> _callback) throws ApiException {
            return getHomeContactChangeAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves an existing Home Contact Change event for the Person.
     * Retrieves an existing Home Contact Change event for the Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetHomeContactChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeContactChangeRequestBuilder getHomeContactChange(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetHomeContactChangeRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getServiceDateCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/serviceDates/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceDateValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getServiceDate(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getServiceDate(Async)");
        }

        return getServiceDateCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ServiceDatesData6b1db753fd82100027b0c8519c860018> getServiceDateWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getServiceDateValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ServiceDatesData6b1db753fd82100027b0c8519c860018>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getServiceDateAsync(String ID, String subresourceID, final ApiCallback<ServiceDatesData6b1db753fd82100027b0c8519c860018> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceDateValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ServiceDatesData6b1db753fd82100027b0c8519c860018>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetServiceDateRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetServiceDateRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getServiceDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getServiceDateCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getServiceDate request
         * @return ServiceDatesData6b1db753fd82100027b0c8519c860018
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ServiceDatesData6b1db753fd82100027b0c8519c860018 execute() throws ApiException {
            ApiResponse<ServiceDatesData6b1db753fd82100027b0c8519c860018> localVarResp = getServiceDateWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getServiceDate request with HTTP info returned
         * @return ApiResponse&lt;ServiceDatesData6b1db753fd82100027b0c8519c860018&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ServiceDatesData6b1db753fd82100027b0c8519c860018> executeWithHttpInfo() throws ApiException {
            return getServiceDateWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getServiceDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceDatesData6b1db753fd82100027b0c8519c860018> _callback) throws ApiException {
            return getServiceDateAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single service date information instance.
     * Retrieves information about a service date for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetServiceDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetServiceDateRequestBuilder getServiceDate(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetServiceDateRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getServiceDatesCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/serviceDates"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceDatesValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getServiceDates(Async)");
        }

        return getServiceDatesCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetServiceDatesResponse> getServiceDatesWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getServiceDatesValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetServiceDatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getServiceDatesAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetServiceDatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceDatesValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetServiceDatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetServiceDatesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetServiceDatesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetServiceDatesRequestBuilder
         */
        public GetServiceDatesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetServiceDatesRequestBuilder
         */
        public GetServiceDatesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getServiceDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getServiceDatesCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getServiceDates request
         * @return WorkersGetServiceDatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetServiceDatesResponse execute() throws ApiException {
            ApiResponse<WorkersGetServiceDatesResponse> localVarResp = getServiceDatesWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getServiceDates request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetServiceDatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetServiceDatesResponse> executeWithHttpInfo() throws ApiException {
            return getServiceDatesWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getServiceDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetServiceDatesResponse> _callback) throws ApiException {
            return getServiceDatesAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of service dates for the specified worker id.
     * Retrieves all service dates for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetServiceDatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetServiceDatesRequestBuilder getServiceDates(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetServiceDatesRequestBuilder(ID);
    }
    private okhttp3.Call getSkillItemsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/skillItems"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSkillItemsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getSkillItems(Async)");
        }

        return getSkillItemsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetSkillItemsResponse> getSkillItemsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getSkillItemsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetSkillItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSkillItemsAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetSkillItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSkillItemsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetSkillItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSkillItemsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetSkillItemsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetSkillItemsRequestBuilder
         */
        public GetSkillItemsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetSkillItemsRequestBuilder
         */
        public GetSkillItemsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getSkillItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSkillItemsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getSkillItems request
         * @return WorkersGetSkillItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetSkillItemsResponse execute() throws ApiException {
            ApiResponse<WorkersGetSkillItemsResponse> localVarResp = getSkillItemsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSkillItems request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetSkillItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetSkillItemsResponse> executeWithHttpInfo() throws ApiException {
            return getSkillItemsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getSkillItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetSkillItemsResponse> _callback) throws ApiException {
            return getSkillItemsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * 
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetSkillItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSkillItemsRequestBuilder getSkillItems(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetSkillItemsRequestBuilder(ID);
    }
    private okhttp3.Call getSkillItemsByIdCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/skillItems/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSkillItemsByIdValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getSkillItemsById(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getSkillItemsById(Async)");
        }

        return getSkillItemsByIdCall(ID, subresourceID, _callback);

    }


    private ApiResponse<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8> getSkillItemsByIdWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getSkillItemsByIdValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSkillItemsByIdAsync(String ID, String subresourceID, final ApiCallback<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSkillItemsByIdValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSkillItemsByIdRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetSkillItemsByIdRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getSkillItemsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSkillItemsByIdCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getSkillItemsById request
         * @return SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8 execute() throws ApiException {
            ApiResponse<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8> localVarResp = getSkillItemsByIdWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSkillItemsById request with HTTP info returned
         * @return ApiResponse&lt;SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8> executeWithHttpInfo() throws ApiException {
            return getSkillItemsByIdWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getSkillItemsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8> _callback) throws ApiException {
            return getSkillItemsByIdAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * 
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetSkillItemsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSkillItemsByIdRequestBuilder getSkillItemsById(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetSkillItemsByIdRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getStaffingInformationCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStaffingInformationValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStaffingInformation(Async)");
        }

        return getStaffingInformationCall(ID, _callback);

    }


    private ApiResponse<WorkerDataC2466b0778c610000d1936006720000e> getStaffingInformationWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getStaffingInformationValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<WorkerDataC2466b0778c610000d1936006720000e>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStaffingInformationAsync(String ID, final ApiCallback<WorkerDataC2466b0778c610000d1936006720000e> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStaffingInformationValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<WorkerDataC2466b0778c610000d1936006720000e>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStaffingInformationRequestBuilder {
        private final String ID;

        private GetStaffingInformationRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getStaffingInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStaffingInformationCall(ID, _callback);
        }


        /**
         * Execute getStaffingInformation request
         * @return WorkerDataC2466b0778c610000d1936006720000e
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerDataC2466b0778c610000d1936006720000e execute() throws ApiException {
            ApiResponse<WorkerDataC2466b0778c610000d1936006720000e> localVarResp = getStaffingInformationWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStaffingInformation request with HTTP info returned
         * @return ApiResponse&lt;WorkerDataC2466b0778c610000d1936006720000e&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerDataC2466b0778c610000d1936006720000e> executeWithHttpInfo() throws ApiException {
            return getStaffingInformationWithHttpInfo(ID);
        }

        /**
         * Execute getStaffingInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerDataC2466b0778c610000d1936006720000e> _callback) throws ApiException {
            return getStaffingInformationAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a collection of workers and current staffing information.
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetStaffingInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStaffingInformationRequestBuilder getStaffingInformation(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetStaffingInformationRequestBuilder(ID);
    }
    private okhttp3.Call getWorkContactChangeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/workContactInformationChanges/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkContactChangeValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkContactChange(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWorkContactChange(Async)");
        }

        return getWorkContactChangeCall(ID, subresourceID, _callback);

    }


    private ApiResponse<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> getWorkContactChangeWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWorkContactChangeValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkContactChangeAsync(String ID, String subresourceID, final ApiCallback<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkContactChangeValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkContactChangeRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWorkContactChangeRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWorkContactChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkContactChangeCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWorkContactChange request
         * @return WorkContactChangeEvent5fca6c96c1c81000142fd03784140113
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 execute() throws ApiException {
            ApiResponse<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> localVarResp = getWorkContactChangeWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkContactChange request with HTTP info returned
         * @return ApiResponse&lt;WorkContactChangeEvent5fca6c96c1c81000142fd03784140113&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> executeWithHttpInfo() throws ApiException {
            return getWorkContactChangeWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWorkContactChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> _callback) throws ApiException {
            return getWorkContactChangeAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves an existing Work Contact Change event for the Person.
     * Retrieves an existing Work Contact Change event for the Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWorkContactChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkContactChangeRequestBuilder getWorkContactChange(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWorkContactChangeRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call initiateJobChangeCall(String ID, JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111;

        // create path and map variables
        String localVarPath = "/workers/{ID}/jobChanges"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateJobChangeValidateBeforeCall(String ID, JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling initiateJobChange(Async)");
        }

        // verify the required parameter 'jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111' is set
        if (jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 == null) {
            throw new ApiException("Missing the required parameter 'jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111' when calling initiateJobChange(Async)");
        }

        return initiateJobChangeCall(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, _callback);

    }


    private ApiResponse<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111> initiateJobChangeWithHttpInfo(String ID, JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111) throws ApiException {
        okhttp3.Call localVarCall = initiateJobChangeValidateBeforeCall(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, null);
        Type localVarReturnType = new TypeToken<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiateJobChangeAsync(String ID, JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, final ApiCallback<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateJobChangeValidateBeforeCall(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, _callback);
        Type localVarReturnType = new TypeToken<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiateJobChangeRequestBuilder {
        private final String ID;
        private SupervisoryOrganization75e528a78e9a10000ab75132a9df0116 supervisoryOrganization;
        private Location75e528a78e9a10000ab75125ebe50114 location;
        private Template2b1b95dfe4af100007f63081aec5158e template;
        private Reason85deac43cd1a10000b96c80c118f171e reason;
        private LocalDate date;
        private Job75e528a78e9a10000ab7512c5c550115 job;
        private String id;
        private String descriptor;

        private InitiateJobChangeRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set supervisoryOrganization
         * @param supervisoryOrganization  (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder supervisoryOrganization(SupervisoryOrganization75e528a78e9a10000ab75132a9df0116 supervisoryOrganization) {
            this.supervisoryOrganization = supervisoryOrganization;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder location(Location75e528a78e9a10000ab75125ebe50114 location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set template
         * @param template  (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder template(Template2b1b95dfe4af100007f63081aec5158e template) {
            this.template = template;
            return this;
        }
        
        /**
         * Set reason
         * @param reason  (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder reason(Reason85deac43cd1a10000b96c80c118f171e reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set date
         * @param date The date this business process takes effect. (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder job(Job75e528a78e9a10000ab7512c5c550115 job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return InitiateJobChangeRequestBuilder
         */
        public InitiateJobChangeRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for initiateJobChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 = buildBodyParams();
            return initiateJobChangeCall(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, _callback);
        }

        private JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 buildBodyParams() {
            JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 = new JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111();
            return jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111;
        }

        /**
         * Execute initiateJobChange request
         * @return JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 execute() throws ApiException {
            JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 = buildBodyParams();
            ApiResponse<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111> localVarResp = initiateJobChangeWithHttpInfo(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiateJobChange request with HTTP info returned
         * @return ApiResponse&lt;JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111> executeWithHttpInfo() throws ApiException {
            JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 = buildBodyParams();
            return initiateJobChangeWithHttpInfo(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111);
        }

        /**
         * Execute initiateJobChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111> _callback) throws ApiException {
            JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 = buildBodyParams();
            return initiateJobChangeAsync(ID, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, _callback);
        }
    }

    /**
     * Initiates a job change request for a specific worker
     * Initiates a job change request for a specific worker Call this method to start a new job change event, which returns a new job change ID. Use the new ID to reference the job change event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}, reason {id}  To retrieve a worker ID, call the GET /values/jobChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for change job for the current user are returned.  To retrieve a job ID, call the GET /values/jobChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do a job change. You can filter the results by effectiveDate. By default, it returns positions on the current date.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  To retrieve a supervisoryOrganization ID, call the GET /values/jobChangesGroup/supervisoryOrganization prompt endpoint, with proposedManager and effectiveDate query parameters. If you specify the proposedManager parameter, it returns HREF links to all supervisory organizations for that manager. If you specify effectiveDate, it filters the results by effective date. The default is the current date.  To retrieve a location ID, call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the staffingEvent query parameter.  It returns HREF links to locations by location categories for the specified location. You can filter the results by effectiveDate. By default, it returns locations on the current date.  Secured by: Change Job (REST Service)  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111  (required)
     * @return InitiateJobChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public InitiateJobChangeRequestBuilder initiateJobChange(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new InitiateJobChangeRequestBuilder(ID);
    }
    private okhttp3.Call initiateOrganizationAssignmentChangeCall(String ID, OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e;

        // create path and map variables
        String localVarPath = "/workers/{ID}/organizationAssignmentChanges"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateOrganizationAssignmentChangeValidateBeforeCall(String ID, OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling initiateOrganizationAssignmentChange(Async)");
        }

        // verify the required parameter 'organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e' is set
        if (organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e == null) {
            throw new ApiException("Missing the required parameter 'organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e' when calling initiateOrganizationAssignmentChange(Async)");
        }

        return initiateOrganizationAssignmentChangeCall(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, _callback);

    }


    private ApiResponse<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e> initiateOrganizationAssignmentChangeWithHttpInfo(String ID, OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e) throws ApiException {
        okhttp3.Call localVarCall = initiateOrganizationAssignmentChangeValidateBeforeCall(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, null);
        Type localVarReturnType = new TypeToken<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiateOrganizationAssignmentChangeAsync(String ID, OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, final ApiCallback<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateOrganizationAssignmentChangeValidateBeforeCall(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, _callback);
        Type localVarReturnType = new TypeToken<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiateOrganizationAssignmentChangeRequestBuilder {
        private final String ID;
        private Position99f6257185e61000043aadd66df203bb position;
        private LocalDate date;
        private String id;
        private String descriptor;

        private InitiateOrganizationAssignmentChangeRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set position
         * @param position  (optional)
         * @return InitiateOrganizationAssignmentChangeRequestBuilder
         */
        public InitiateOrganizationAssignmentChangeRequestBuilder position(Position99f6257185e61000043aadd66df203bb position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set date
         * @param date The date this business process takes effect. (optional)
         * @return InitiateOrganizationAssignmentChangeRequestBuilder
         */
        public InitiateOrganizationAssignmentChangeRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return InitiateOrganizationAssignmentChangeRequestBuilder
         */
        public InitiateOrganizationAssignmentChangeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return InitiateOrganizationAssignmentChangeRequestBuilder
         */
        public InitiateOrganizationAssignmentChangeRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for initiateOrganizationAssignmentChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e = buildBodyParams();
            return initiateOrganizationAssignmentChangeCall(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, _callback);
        }

        private OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e buildBodyParams() {
            OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e = new OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e();
            return organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e;
        }

        /**
         * Execute initiateOrganizationAssignmentChange request
         * @return OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e execute() throws ApiException {
            OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e = buildBodyParams();
            ApiResponse<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e> localVarResp = initiateOrganizationAssignmentChangeWithHttpInfo(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiateOrganizationAssignmentChange request with HTTP info returned
         * @return ApiResponse&lt;OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e> executeWithHttpInfo() throws ApiException {
            OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e = buildBodyParams();
            return initiateOrganizationAssignmentChangeWithHttpInfo(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e);
        }

        /**
         * Execute initiateOrganizationAssignmentChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e> _callback) throws ApiException {
            OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e = buildBodyParams();
            return initiateOrganizationAssignmentChangeAsync(ID, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, _callback);
        }
    }

    /**
     * Initiates an organization assignment change for a specific worker.
     * Initiates an organization assignment change for a specific worker. Call this method to start a new change organization assignment event, which returns a new change organization assignment ID. Use the new ID to reference the change organization assignment event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}  To retrieve a worker ID, call the GET /values/organizationAssignmentChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for organization assignment change for the current user are returned.  To retrieve a job ID, call the /values/organizationAssignmentChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do an organization assignment change . You can filter the results by effectiveDate. By default, it returns positions on the current date.  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
     * @param ID The Workday ID of the resource. (required)
     * @param organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e  (required)
     * @return InitiateOrganizationAssignmentChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public InitiateOrganizationAssignmentChangeRequestBuilder initiateOrganizationAssignmentChange(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new InitiateOrganizationAssignmentChangeRequestBuilder(ID);
    }
    private okhttp3.Call partiallyUpdateCheckInCall(String ID, String subresourceID, CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInArchiveDetail1163fe23102e10001df342088f8a018e;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkIns/{subresourceID}?type=archive"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateCheckInValidateBeforeCall(String ID, String subresourceID, CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling partiallyUpdateCheckIn(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling partiallyUpdateCheckIn(Async)");
        }

        // verify the required parameter 'checkInArchiveDetail1163fe23102e10001df342088f8a018e' is set
        if (checkInArchiveDetail1163fe23102e10001df342088f8a018e == null) {
            throw new ApiException("Missing the required parameter 'checkInArchiveDetail1163fe23102e10001df342088f8a018e' when calling partiallyUpdateCheckIn(Async)");
        }

        return partiallyUpdateCheckInCall(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e, _callback);

    }


    private ApiResponse<CheckInArchiveDetail1163fe23102e10001df342088f8a018e> partiallyUpdateCheckInWithHttpInfo(String ID, String subresourceID, CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateCheckInValidateBeforeCall(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e, null);
        Type localVarReturnType = new TypeToken<CheckInArchiveDetail1163fe23102e10001df342088f8a018e>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateCheckInAsync(String ID, String subresourceID, CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e, final ApiCallback<CheckInArchiveDetail1163fe23102e10001df342088f8a018e> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateCheckInValidateBeforeCall(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e, _callback);
        Type localVarReturnType = new TypeToken<CheckInArchiveDetail1163fe23102e10001df342088f8a018e>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateCheckInRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Boolean archive;
        private String id;
        private String descriptor;

        private PartiallyUpdateCheckInRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set archive
         * @param archive Indicates that the check-in is archived. (optional)
         * @return PartiallyUpdateCheckInRequestBuilder
         */
        public PartiallyUpdateCheckInRequestBuilder archive(Boolean archive) {
            this.archive = archive;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return PartiallyUpdateCheckInRequestBuilder
         */
        public PartiallyUpdateCheckInRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return PartiallyUpdateCheckInRequestBuilder
         */
        public PartiallyUpdateCheckInRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for partiallyUpdateCheckIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e = buildBodyParams();
            return partiallyUpdateCheckInCall(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e, _callback);
        }

        private CheckInArchiveDetail1163fe23102e10001df342088f8a018e buildBodyParams() {
            CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e = new CheckInArchiveDetail1163fe23102e10001df342088f8a018e();
            return checkInArchiveDetail1163fe23102e10001df342088f8a018e;
        }

        /**
         * Execute partiallyUpdateCheckIn request
         * @return CheckInArchiveDetail1163fe23102e10001df342088f8a018e
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInArchiveDetail1163fe23102e10001df342088f8a018e execute() throws ApiException {
            CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e = buildBodyParams();
            ApiResponse<CheckInArchiveDetail1163fe23102e10001df342088f8a018e> localVarResp = partiallyUpdateCheckInWithHttpInfo(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdateCheckIn request with HTTP info returned
         * @return ApiResponse&lt;CheckInArchiveDetail1163fe23102e10001df342088f8a018e&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInArchiveDetail1163fe23102e10001df342088f8a018e> executeWithHttpInfo() throws ApiException {
            CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e = buildBodyParams();
            return partiallyUpdateCheckInWithHttpInfo(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e);
        }

        /**
         * Execute partiallyUpdateCheckIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInArchiveDetail1163fe23102e10001df342088f8a018e> _callback) throws ApiException {
            CheckInArchiveDetail1163fe23102e10001df342088f8a018e checkInArchiveDetail1163fe23102e10001df342088f8a018e = buildBodyParams();
            return partiallyUpdateCheckInAsync(ID, subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e, _callback);
        }
    }

    /**
     * Partially updates an existing Check-In to archived or un-archived.
     * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param checkInArchiveDetail1163fe23102e10001df342088f8a018e  (required)
     * @return PartiallyUpdateCheckInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateCheckInRequestBuilder partiallyUpdateCheckIn(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new PartiallyUpdateCheckInRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call partiallyUpdateCheckInTopicCall(String ID, String subresourceID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInTopicDetail3267c0ba92a010001688d79b032b03b8;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkInTopics/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateCheckInTopicValidateBeforeCall(String ID, String subresourceID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling partiallyUpdateCheckInTopic(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling partiallyUpdateCheckInTopic(Async)");
        }

        // verify the required parameter 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8' is set
        if (checkInTopicDetail3267c0ba92a010001688d79b032b03b8 == null) {
            throw new ApiException("Missing the required parameter 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8' when calling partiallyUpdateCheckInTopic(Async)");
        }

        return partiallyUpdateCheckInTopicCall(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);

    }


    private ApiResponse<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> partiallyUpdateCheckInTopicWithHttpInfo(String ID, String subresourceID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateCheckInTopicValidateBeforeCall(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, null);
        Type localVarReturnType = new TypeToken<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateCheckInTopicAsync(String ID, String subresourceID, CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8, final ApiCallback<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateCheckInTopicValidateBeforeCall(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);
        Type localVarReturnType = new TypeToken<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateCheckInTopicRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String sharedNotes;
        private List<AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4> associatedCheckIns;
        private String privateNotes;
        private String name;
        private List<CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1> checkInTopicAttachments;
        private String id;

        private PartiallyUpdateCheckInTopicRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set sharedNotes
         * @param sharedNotes Shared notes of the topic. (optional)
         * @return PartiallyUpdateCheckInTopicRequestBuilder
         */
        public PartiallyUpdateCheckInTopicRequestBuilder sharedNotes(String sharedNotes) {
            this.sharedNotes = sharedNotes;
            return this;
        }
        
        /**
         * Set associatedCheckIns
         * @param associatedCheckIns Check-ins associated to topic. (optional)
         * @return PartiallyUpdateCheckInTopicRequestBuilder
         */
        public PartiallyUpdateCheckInTopicRequestBuilder associatedCheckIns(List<AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4> associatedCheckIns) {
            this.associatedCheckIns = associatedCheckIns;
            return this;
        }
        
        /**
         * Set privateNotes
         * @param privateNotes Personal notes of the topic. (optional)
         * @return PartiallyUpdateCheckInTopicRequestBuilder
         */
        public PartiallyUpdateCheckInTopicRequestBuilder privateNotes(String privateNotes) {
            this.privateNotes = privateNotes;
            return this;
        }
        
        /**
         * Set name
         * @param name Topic name. (optional)
         * @return PartiallyUpdateCheckInTopicRequestBuilder
         */
        public PartiallyUpdateCheckInTopicRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set checkInTopicAttachments
         * @param checkInTopicAttachments Returns all attachments for the Check-In Topic. (optional)
         * @return PartiallyUpdateCheckInTopicRequestBuilder
         */
        public PartiallyUpdateCheckInTopicRequestBuilder checkInTopicAttachments(List<CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1> checkInTopicAttachments) {
            this.checkInTopicAttachments = checkInTopicAttachments;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return PartiallyUpdateCheckInTopicRequestBuilder
         */
        public PartiallyUpdateCheckInTopicRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for partiallyUpdateCheckInTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            return partiallyUpdateCheckInTopicCall(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);
        }

        private CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 buildBodyParams() {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = new CheckInTopicDetail3267c0ba92a010001688d79b032b03b8();
            return checkInTopicDetail3267c0ba92a010001688d79b032b03b8;
        }

        /**
         * Execute partiallyUpdateCheckInTopic request
         * @return CheckInTopicDetail3267c0ba92a010001688d79b032b03b8
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 execute() throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            ApiResponse<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> localVarResp = partiallyUpdateCheckInTopicWithHttpInfo(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdateCheckInTopic request with HTTP info returned
         * @return ApiResponse&lt;CheckInTopicDetail3267c0ba92a010001688d79b032b03b8&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> executeWithHttpInfo() throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            return partiallyUpdateCheckInTopicWithHttpInfo(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8);
        }

        /**
         * Execute partiallyUpdateCheckInTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> _callback) throws ApiException {
            CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 checkInTopicDetail3267c0ba92a010001688d79b032b03b8 = buildBodyParams();
            return partiallyUpdateCheckInTopicAsync(ID, subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, _callback);
        }
    }

    /**
     * Partially updates an existing Check-In topic instance.
     * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (name, privateNotes, sharedNotes, checkInTopicAttachments, or associatedCheckIns). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Edit Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param checkInTopicDetail3267c0ba92a010001688d79b032b03b8  (required)
     * @return PartiallyUpdateCheckInTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateCheckInTopicRequestBuilder partiallyUpdateCheckInTopic(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new PartiallyUpdateCheckInTopicRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call saveUserSkillsCall(String ID, CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e;

        // create path and map variables
        String localVarPath = "/workers/{ID}/explicitSkills"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserSkillsValidateBeforeCall(String ID, CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling saveUserSkills(Async)");
        }

        // verify the required parameter 'createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e' is set
        if (createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e == null) {
            throw new ApiException("Missing the required parameter 'createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e' when calling saveUserSkills(Async)");
        }

        return saveUserSkillsCall(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, _callback);

    }


    private ApiResponse<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e> saveUserSkillsWithHttpInfo(String ID, CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e) throws ApiException {
        okhttp3.Call localVarCall = saveUserSkillsValidateBeforeCall(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, null);
        Type localVarReturnType = new TypeToken<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveUserSkillsAsync(String ID, CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, final ApiCallback<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserSkillsValidateBeforeCall(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, _callback);
        Type localVarReturnType = new TypeToken<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveUserSkillsRequestBuilder {
        private final String ID;
        private List<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> skills;
        private SkillItem98f198f5056b100019631445471d225f skillItem;
        private List<SkillItemSourceAddRepresentationC5fabc4ca81610000d5d15309ac90122> skillSources;

        private SaveUserSkillsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set skills
         * @param skills Explicit Skill Usages (optional)
         * @return SaveUserSkillsRequestBuilder
         */
        public SaveUserSkillsRequestBuilder skills(List<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> skills) {
            this.skills = skills;
            return this;
        }
        
        /**
         * Set skillItem
         * @param skillItem  (optional)
         * @return SaveUserSkillsRequestBuilder
         */
        public SaveUserSkillsRequestBuilder skillItem(SkillItem98f198f5056b100019631445471d225f skillItem) {
            this.skillItem = skillItem;
            return this;
        }
        
        /**
         * Set skillSources
         * @param skillSources Skill Sources (optional)
         * @return SaveUserSkillsRequestBuilder
         */
        public SaveUserSkillsRequestBuilder skillSources(List<SkillItemSourceAddRepresentationC5fabc4ca81610000d5d15309ac90122> skillSources) {
            this.skillSources = skillSources;
            return this;
        }
        
        /**
         * Build call for saveUserSkills
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e = buildBodyParams();
            return saveUserSkillsCall(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, _callback);
        }

        private CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e buildBodyParams() {
            CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e = new CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e();
            return createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e;
        }

        /**
         * Execute saveUserSkills request
         * @return CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e execute() throws ApiException {
            CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e = buildBodyParams();
            ApiResponse<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e> localVarResp = saveUserSkillsWithHttpInfo(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveUserSkills request with HTTP info returned
         * @return ApiResponse&lt;CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e> executeWithHttpInfo() throws ApiException {
            CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e = buildBodyParams();
            return saveUserSkillsWithHttpInfo(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e);
        }

        /**
         * Execute saveUserSkills request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e> _callback) throws ApiException {
            CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e = buildBodyParams();
            return saveUserSkillsAsync(ID, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, _callback);
        }
    }

    /**
     * Save skills a user has
     * Save skills a user has  Secured by: Self-Service: Skills  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e  (required)
     * @return SaveUserSkillsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SaveUserSkillsRequestBuilder saveUserSkills(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new SaveUserSkillsRequestBuilder(ID);
    }
    private okhttp3.Call updateCheckInCall(String ID, String subresourceID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInDetail316b5a26cc3c10000ebdb0cb484602e1;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkIns/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckInValidateBeforeCall(String ID, String subresourceID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateCheckIn(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateCheckIn(Async)");
        }

        // verify the required parameter 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1' is set
        if (checkInDetail316b5a26cc3c10000ebdb0cb484602e1 == null) {
            throw new ApiException("Missing the required parameter 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1' when calling updateCheckIn(Async)");
        }

        return updateCheckInCall(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);

    }


    private ApiResponse<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> updateCheckInWithHttpInfo(String ID, String subresourceID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1) throws ApiException {
        okhttp3.Call localVarCall = updateCheckInValidateBeforeCall(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, null);
        Type localVarReturnType = new TypeToken<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCheckInAsync(String ID, String subresourceID, CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1, final ApiCallback<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckInValidateBeforeCall(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);
        Type localVarReturnType = new TypeToken<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCheckInRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String description;
        private List<AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea> associatedTopics;
        private LocalDate date;
        private List<CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7> checkInAttachments;
        private String id;

        private UpdateCheckInRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set description
         * @param description Description of check-in. (optional)
         * @return UpdateCheckInRequestBuilder
         */
        public UpdateCheckInRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set associatedTopics
         * @param associatedTopics Topics included in a check-in. (optional)
         * @return UpdateCheckInRequestBuilder
         */
        public UpdateCheckInRequestBuilder associatedTopics(List<AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea> associatedTopics) {
            this.associatedTopics = associatedTopics;
            return this;
        }
        
        /**
         * Set date
         * @param date Date of check-in. (optional)
         * @return UpdateCheckInRequestBuilder
         */
        public UpdateCheckInRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set checkInAttachments
         * @param checkInAttachments Returns all attachments for the Check-In. (optional)
         * @return UpdateCheckInRequestBuilder
         */
        public UpdateCheckInRequestBuilder checkInAttachments(List<CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7> checkInAttachments) {
            this.checkInAttachments = checkInAttachments;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateCheckInRequestBuilder
         */
        public UpdateCheckInRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateCheckIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            return updateCheckInCall(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);
        }

        private CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 buildBodyParams() {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = new CheckInDetail316b5a26cc3c10000ebdb0cb484602e1();
            return checkInDetail316b5a26cc3c10000ebdb0cb484602e1;
        }

        /**
         * Execute updateCheckIn request
         * @return CheckInDetail316b5a26cc3c10000ebdb0cb484602e1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 execute() throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            ApiResponse<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> localVarResp = updateCheckInWithHttpInfo(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCheckIn request with HTTP info returned
         * @return ApiResponse&lt;CheckInDetail316b5a26cc3c10000ebdb0cb484602e1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> executeWithHttpInfo() throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            return updateCheckInWithHttpInfo(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1);
        }

        /**
         * Execute updateCheckIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> _callback) throws ApiException {
            CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 checkInDetail316b5a26cc3c10000ebdb0cb484602e1 = buildBodyParams();
            return updateCheckInAsync(ID, subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, _callback);
        }
    }

    /**
     * Partially updates an existing Check-In instance.
     * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (date, description, or associated topics). This can only be done by the creator or participant of the Check-In.    This endpoint is equivalent to the Edit Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param checkInDetail316b5a26cc3c10000ebdb0cb484602e1  (required)
     * @return UpdateCheckInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCheckInRequestBuilder updateCheckIn(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateCheckInRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateCheckInTopicStateCall(String ID, String subresourceID, CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2;

        // create path and map variables
        String localVarPath = "/workers/{ID}/checkInTopics/{subresourceID}?type=archive"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckInTopicStateValidateBeforeCall(String ID, String subresourceID, CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateCheckInTopicState(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateCheckInTopicState(Async)");
        }

        // verify the required parameter 'checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2' is set
        if (checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 == null) {
            throw new ApiException("Missing the required parameter 'checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2' when calling updateCheckInTopicState(Async)");
        }

        return updateCheckInTopicStateCall(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, _callback);

    }


    private ApiResponse<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2> updateCheckInTopicStateWithHttpInfo(String ID, String subresourceID, CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2) throws ApiException {
        okhttp3.Call localVarCall = updateCheckInTopicStateValidateBeforeCall(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, null);
        Type localVarReturnType = new TypeToken<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCheckInTopicStateAsync(String ID, String subresourceID, CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, final ApiCallback<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckInTopicStateValidateBeforeCall(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, _callback);
        Type localVarReturnType = new TypeToken<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCheckInTopicStateRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Boolean archive;
        private String id;
        private String descriptor;

        private UpdateCheckInTopicStateRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set archive
         * @param archive Indicates that the topic is archived. (optional)
         * @return UpdateCheckInTopicStateRequestBuilder
         */
        public UpdateCheckInTopicStateRequestBuilder archive(Boolean archive) {
            this.archive = archive;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateCheckInTopicStateRequestBuilder
         */
        public UpdateCheckInTopicStateRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdateCheckInTopicStateRequestBuilder
         */
        public UpdateCheckInTopicStateRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for updateCheckInTopicState
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 = buildBodyParams();
            return updateCheckInTopicStateCall(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, _callback);
        }

        private CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 buildBodyParams() {
            CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 = new CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2();
            return checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2;
        }

        /**
         * Execute updateCheckInTopicState request
         * @return CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 execute() throws ApiException {
            CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 = buildBodyParams();
            ApiResponse<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2> localVarResp = updateCheckInTopicStateWithHttpInfo(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCheckInTopicState request with HTTP info returned
         * @return ApiResponse&lt;CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2> executeWithHttpInfo() throws ApiException {
            CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 = buildBodyParams();
            return updateCheckInTopicStateWithHttpInfo(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2);
        }

        /**
         * Execute updateCheckInTopicState request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2> _callback) throws ApiException {
            CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 = buildBodyParams();
            return updateCheckInTopicStateAsync(ID, subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, _callback);
        }
    }

    /**
     * Partially updates an existing Check-In topic to archived or un-archived.
     * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2  (required)
     * @return UpdateCheckInTopicStateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCheckInTopicStateRequestBuilder updateCheckInTopicState(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateCheckInTopicStateRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateExternalSkillLevelCall(String ID, String subresourceID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalSkillLevelA39462f09c44100005d46fd77ef00000;

        // create path and map variables
        String localVarPath = "/workers/{ID}/externalSkillLevel/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExternalSkillLevelValidateBeforeCall(String ID, String subresourceID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateExternalSkillLevel(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateExternalSkillLevel(Async)");
        }

        // verify the required parameter 'externalSkillLevelA39462f09c44100005d46fd77ef00000' is set
        if (externalSkillLevelA39462f09c44100005d46fd77ef00000 == null) {
            throw new ApiException("Missing the required parameter 'externalSkillLevelA39462f09c44100005d46fd77ef00000' when calling updateExternalSkillLevel(Async)");
        }

        return updateExternalSkillLevelCall(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);

    }


    private ApiResponse<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> updateExternalSkillLevelWithHttpInfo(String ID, String subresourceID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000) throws ApiException {
        okhttp3.Call localVarCall = updateExternalSkillLevelValidateBeforeCall(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000, null);
        Type localVarReturnType = new TypeToken<ExternalSkillLevelA39462f09c44100005d46fd77ef00000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExternalSkillLevelAsync(String ID, String subresourceID, ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000, final ApiCallback<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExternalSkillLevelValidateBeforeCall(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);
        Type localVarReturnType = new TypeToken<ExternalSkillLevelA39462f09c44100005d46fd77ef00000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExternalSkillLevelRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Integer externalSkillLevel;
        private String externalSkillId;
        private LocalDate effectiveMoment;
        private String context;
        private String id;

        private UpdateExternalSkillLevelRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set externalSkillLevel
         * @param externalSkillLevel The skill level normalized to a scale from 1-5 and to 1 decimal place. (optional)
         * @return UpdateExternalSkillLevelRequestBuilder
         */
        public UpdateExternalSkillLevelRequestBuilder externalSkillLevel(Integer externalSkillLevel) {
            this.externalSkillLevel = externalSkillLevel;
            return this;
        }
        
        /**
         * Set externalSkillId
         * @param externalSkillId The skill from the external system. (optional)
         * @return UpdateExternalSkillLevelRequestBuilder
         */
        public UpdateExternalSkillLevelRequestBuilder externalSkillId(String externalSkillId) {
            this.externalSkillId = externalSkillId;
            return this;
        }
        
        /**
         * Set effectiveMoment
         * @param effectiveMoment The date that the external Skill Level was last updated. (optional)
         * @return UpdateExternalSkillLevelRequestBuilder
         */
        public UpdateExternalSkillLevelRequestBuilder effectiveMoment(LocalDate effectiveMoment) {
            this.effectiveMoment = effectiveMoment;
            return this;
        }
        
        /**
         * Set context
         * @param context The text you enter to provide context for this external skill load. Not visible to end users. (optional)
         * @return UpdateExternalSkillLevelRequestBuilder
         */
        public UpdateExternalSkillLevelRequestBuilder context(String context) {
            this.context = context;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateExternalSkillLevelRequestBuilder
         */
        public UpdateExternalSkillLevelRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateExternalSkillLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            return updateExternalSkillLevelCall(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);
        }

        private ExternalSkillLevelA39462f09c44100005d46fd77ef00000 buildBodyParams() {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = new ExternalSkillLevelA39462f09c44100005d46fd77ef00000();
            return externalSkillLevelA39462f09c44100005d46fd77ef00000;
        }

        /**
         * Execute updateExternalSkillLevel request
         * @return ExternalSkillLevelA39462f09c44100005d46fd77ef00000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ExternalSkillLevelA39462f09c44100005d46fd77ef00000 execute() throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            ApiResponse<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> localVarResp = updateExternalSkillLevelWithHttpInfo(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExternalSkillLevel request with HTTP info returned
         * @return ApiResponse&lt;ExternalSkillLevelA39462f09c44100005d46fd77ef00000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> executeWithHttpInfo() throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            return updateExternalSkillLevelWithHttpInfo(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000);
        }

        /**
         * Execute updateExternalSkillLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> _callback) throws ApiException {
            ExternalSkillLevelA39462f09c44100005d46fd77ef00000 externalSkillLevelA39462f09c44100005d46fd77ef00000 = buildBodyParams();
            return updateExternalSkillLevelAsync(ID, subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000, _callback);
        }
    }

    /**
     * Updates external skill levels.
     * Updates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param externalSkillLevelA39462f09c44100005d46fd77ef00000  (required)
     * @return UpdateExternalSkillLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExternalSkillLevelRequestBuilder updateExternalSkillLevel(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateExternalSkillLevelRequestBuilder(ID, subresourceID);
    }
}
