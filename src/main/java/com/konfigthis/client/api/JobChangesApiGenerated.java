/*
 * staffing
 * The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssignmentType23929e1f68ca10000d6940d6bde56963;
import com.konfigthis.client.model.BusinessProcessParameters5afc0b4b5a4610002aaebb8180cd2261;
import com.konfigthis.client.model.ChangeJobAdditionalJobClassificationData27ec818d10d0100003600115b5200102;
import com.konfigthis.client.model.ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea;
import com.konfigthis.client.model.ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102;
import com.konfigthis.client.model.ChangeJobCompanyInsiderTypesData05d4c45042b61000131e4b2132f30137;
import com.konfigthis.client.model.ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107;
import com.konfigthis.client.model.ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7;
import com.konfigthis.client.model.ChangeJobJobClassificationData354103f196361000084489bcb281017f;
import com.konfigthis.client.model.ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115;
import com.konfigthis.client.model.ChangeJobLocation90151d6c4ff110001b4a46091678025c;
import com.konfigthis.client.model.ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146;
import com.konfigthis.client.model.ChangeJobOpeningData97af9049a5fd10001c4888d654170000;
import com.konfigthis.client.model.ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221;
import com.konfigthis.client.model.Comments7d98fd55aeee100022968e52a1b31c60;
import com.konfigthis.client.model.Currency2d0ca2cb2448100009c54386a8570e07;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.EventState54e611eca2c910000fbc4579181c0111;
import com.konfigthis.client.model.Frequency2d0ca2cb2448100009c5436d5d670e06;
import com.konfigthis.client.model.HeadcountOption97af9049a5fd10001c48896fbde30000;
import com.konfigthis.client.model.Job35b8f199c29410002508ffd7ad6101f3;
import com.konfigthis.client.model.JobChangesGetAdministrativeOptionsResponse;
import com.konfigthis.client.model.JobChangesGetBusinessTitleResponse;
import com.konfigthis.client.model.JobChangesGetCommentByIdResponse;
import com.konfigthis.client.model.JobChangesGetContractOptionsResponse;
import com.konfigthis.client.model.JobChangesGetJobClassificationResponse;
import com.konfigthis.client.model.JobChangesGetJobProfileResponse;
import com.konfigthis.client.model.JobChangesGetLocationInfoResponse;
import com.konfigthis.client.model.JobChangesGetMoveTeamOptionResponse;
import com.konfigthis.client.model.JobChangesGetOpeningOptionsResponse;
import com.konfigthis.client.model.JobChangesGetPositionByIdResponse;
import com.konfigthis.client.model.JobChangesGetStartDetailsResponse;
import com.konfigthis.client.model.JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020;
import com.konfigthis.client.model.JobProfile3db8095ffa18100013f019afc6d30116;
import com.konfigthis.client.model.JobRequisitionDfc4e58f730810001ad60325d9bc52cf;
import java.time.LocalDate;
import com.konfigthis.client.model.Location6da81665c26510001fc6b1d42fae5f7b;
import com.konfigthis.client.model.Location90151d6c4ff110001bfa027116820278;
import com.konfigthis.client.model.PayRateTypeD25283821c01100016756a14eb650000;
import com.konfigthis.client.model.PositionDfc4e58f730810001ad60369c23452d1;
import com.konfigthis.client.model.PositionWorkerType05d4c45042b610001030ee47f2c90118;
import com.konfigthis.client.model.PurchaseOrder2d0ca2cb2448100009c5433bcff60e05;
import com.konfigthis.client.model.Reason6da81665c26510001f34d0a154765e9b;
import com.konfigthis.client.model.Status54e611eca2c910000fbc4599be0b0112;
import com.konfigthis.client.model.SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8;
import com.konfigthis.client.model.Template2b1b95dfe4af100009f30dc769a31686;
import com.konfigthis.client.model.TimeType05d4c45042b610000bb540b7458e0108;
import com.konfigthis.client.model.WorkShift0ee7bb8b41db1000143d4e4822174f2e;
import com.konfigthis.client.model.WorkSpace0ee7bb8b41db10001e7db6a6c3e55663;
import com.konfigthis.client.model.WorkStudy05d4c45042b610000ba2f83c70f30101;
import com.konfigthis.client.model.Worker271bbd673582100010110b9f9a6d99e1;
import com.konfigthis.client.model.WorkersCompensationCodeOverride05d4c45042b61000138500e185e0013f;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobChangesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobChangesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobChangesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAdminOptionsCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/administrative/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminOptionsValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAdminOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getAdminOptions(Async)");
        }

        return getAdminOptionsCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> getAdminOptionsWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getAdminOptionsValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdminOptionsAsync(String ID, String subresourceID, final ApiCallback<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminOptionsValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdminOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetAdminOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getAdminOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdminOptionsCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getAdminOptions request
         * @return ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea execute() throws ApiException {
            ApiResponse<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> localVarResp = getAdminOptionsWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdminOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> executeWithHttpInfo() throws ApiException {
            return getAdminOptionsWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getAdminOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> _callback) throws ApiException {
            return getAdminOptionsAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves the administrative options for the specified job change ID.
     * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetAdminOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAdminOptionsRequestBuilder getAdminOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetAdminOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getAdministrativeOptionsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/administrative"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdministrativeOptionsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAdministrativeOptions(Async)");
        }

        return getAdministrativeOptionsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetAdministrativeOptionsResponse> getAdministrativeOptionsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getAdministrativeOptionsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetAdministrativeOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdministrativeOptionsAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetAdministrativeOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdministrativeOptionsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetAdministrativeOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdministrativeOptionsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetAdministrativeOptionsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetAdministrativeOptionsRequestBuilder
         */
        public GetAdministrativeOptionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAdministrativeOptionsRequestBuilder
         */
        public GetAdministrativeOptionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAdministrativeOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdministrativeOptionsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getAdministrativeOptions request
         * @return JobChangesGetAdministrativeOptionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetAdministrativeOptionsResponse execute() throws ApiException {
            ApiResponse<JobChangesGetAdministrativeOptionsResponse> localVarResp = getAdministrativeOptionsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdministrativeOptions request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetAdministrativeOptionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetAdministrativeOptionsResponse> executeWithHttpInfo() throws ApiException {
            return getAdministrativeOptionsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getAdministrativeOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetAdministrativeOptionsResponse> _callback) throws ApiException {
            return getAdministrativeOptionsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves the administrative options for the specified job change ID.
     * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetAdministrativeOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAdministrativeOptionsRequestBuilder getAdministrativeOptions(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetAdministrativeOptionsRequestBuilder(ID);
    }
    private okhttp3.Call getBusinessTitleCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/businessTitle/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBusinessTitleValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getBusinessTitle(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getBusinessTitle(Async)");
        }

        return getBusinessTitleCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> getBusinessTitleWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getBusinessTitleValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBusinessTitleAsync(String ID, String subresourceID, final ApiCallback<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBusinessTitleValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBusinessTitleRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetBusinessTitleRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getBusinessTitle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBusinessTitleCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getBusinessTitle request
         * @return ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 execute() throws ApiException {
            ApiResponse<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> localVarResp = getBusinessTitleWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBusinessTitle request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> executeWithHttpInfo() throws ApiException {
            return getBusinessTitleWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getBusinessTitle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> _callback) throws ApiException {
            return getBusinessTitleAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a business title for the specified job change ID.
     * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetBusinessTitleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetBusinessTitleRequestBuilder getBusinessTitle(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetBusinessTitleRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getBusinessTitle_0Call(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/businessTitle"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBusinessTitle_0ValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getBusinessTitle_0(Async)");
        }

        return getBusinessTitle_0Call(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetBusinessTitleResponse> getBusinessTitle_0WithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getBusinessTitle_0ValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetBusinessTitleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBusinessTitle_0Async(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetBusinessTitleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBusinessTitle_0ValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetBusinessTitleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBusinessTitle0RequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetBusinessTitle0RequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetBusinessTitle0RequestBuilder
         */
        public GetBusinessTitle0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetBusinessTitle0RequestBuilder
         */
        public GetBusinessTitle0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getBusinessTitle_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBusinessTitle_0Call(ID, limit, offset, _callback);
        }


        /**
         * Execute getBusinessTitle_0 request
         * @return JobChangesGetBusinessTitleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetBusinessTitleResponse execute() throws ApiException {
            ApiResponse<JobChangesGetBusinessTitleResponse> localVarResp = getBusinessTitle_0WithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBusinessTitle_0 request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetBusinessTitleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetBusinessTitleResponse> executeWithHttpInfo() throws ApiException {
            return getBusinessTitle_0WithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getBusinessTitle_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetBusinessTitleResponse> _callback) throws ApiException {
            return getBusinessTitle_0Async(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a business title for the specified job change ID.
     * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetBusinessTitle0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetBusinessTitle0RequestBuilder getBusinessTitle_0(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetBusinessTitle0RequestBuilder(ID);
    }
    private okhttp3.Call getByIdCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getById(Async)");
        }

        return getByIdCall(ID, _callback);

    }


    private ApiResponse<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7> getByIdWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String ID, final ApiCallback<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String ID;

        private GetByIdRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(ID, _callback);
        }


        /**
         * Execute getById request
         * @return ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7 execute() throws ApiException {
            ApiResponse<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7> localVarResp = getByIdWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(ID);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7> _callback) throws ApiException {
            return getByIdAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a single change job event instance.
     * Retrieves a change job event with the specified ID.  Secured by: Change Job (Mass Action), Change Job (REST Service), Staffing Actions, Staffing Actions: Academic Pay, Staffing Actions: Additional Job Classifications, Staffing Actions: Administrator, Staffing Actions: Attachments, Staffing Actions: Business Title, Staffing Actions: Change Job Date and Reason, Staffing Actions: Compensation for All Job Profiles, Staffing Actions: Contract Details, Staffing Actions: Hire Student, Staffing Actions: Job Profile, Staffing Actions: View \\~Worker\\~ Start Date Correction  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetByIdRequestBuilder(ID);
    }
    private okhttp3.Call getCommentByIdCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/comment"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentByIdValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getCommentById(Async)");
        }

        return getCommentByIdCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetCommentByIdResponse> getCommentByIdWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getCommentByIdValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetCommentByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentByIdAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetCommentByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentByIdValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetCommentByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommentByIdRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetCommentByIdRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCommentByIdRequestBuilder
         */
        public GetCommentByIdRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCommentByIdRequestBuilder
         */
        public GetCommentByIdRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCommentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentByIdCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getCommentById request
         * @return JobChangesGetCommentByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetCommentByIdResponse execute() throws ApiException {
            ApiResponse<JobChangesGetCommentByIdResponse> localVarResp = getCommentByIdWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommentById request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetCommentByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetCommentByIdResponse> executeWithHttpInfo() throws ApiException {
            return getCommentByIdWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getCommentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetCommentByIdResponse> _callback) throws ApiException {
            return getCommentByIdAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Returns the comment information for the specified job change ID.
     * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetCommentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentByIdRequestBuilder getCommentById(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetCommentByIdRequestBuilder(ID);
    }
    private okhttp3.Call getCommentInfoCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/comment/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentInfoValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getCommentInfo(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getCommentInfo(Async)");
        }

        return getCommentInfoCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Comments7d98fd55aeee100022968e52a1b31c60> getCommentInfoWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getCommentInfoValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<Comments7d98fd55aeee100022968e52a1b31c60>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentInfoAsync(String ID, String subresourceID, final ApiCallback<Comments7d98fd55aeee100022968e52a1b31c60> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentInfoValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<Comments7d98fd55aeee100022968e52a1b31c60>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommentInfoRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetCommentInfoRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getCommentInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentInfoCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getCommentInfo request
         * @return Comments7d98fd55aeee100022968e52a1b31c60
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Comments7d98fd55aeee100022968e52a1b31c60 execute() throws ApiException {
            ApiResponse<Comments7d98fd55aeee100022968e52a1b31c60> localVarResp = getCommentInfoWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommentInfo request with HTTP info returned
         * @return ApiResponse&lt;Comments7d98fd55aeee100022968e52a1b31c60&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comments7d98fd55aeee100022968e52a1b31c60> executeWithHttpInfo() throws ApiException {
            return getCommentInfoWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getCommentInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comments7d98fd55aeee100022968e52a1b31c60> _callback) throws ApiException {
            return getCommentInfoAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Returns the comment information for the specified job change ID.
     * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetCommentInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentInfoRequestBuilder getCommentInfo(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetCommentInfoRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getContractOptionsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/contract"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractOptionsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getContractOptions(Async)");
        }

        return getContractOptionsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetContractOptionsResponse> getContractOptionsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getContractOptionsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetContractOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractOptionsAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetContractOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractOptionsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetContractOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractOptionsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetContractOptionsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetContractOptionsRequestBuilder
         */
        public GetContractOptionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetContractOptionsRequestBuilder
         */
        public GetContractOptionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getContractOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractOptionsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getContractOptions request
         * @return JobChangesGetContractOptionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetContractOptionsResponse execute() throws ApiException {
            ApiResponse<JobChangesGetContractOptionsResponse> localVarResp = getContractOptionsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContractOptions request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetContractOptionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetContractOptionsResponse> executeWithHttpInfo() throws ApiException {
            return getContractOptionsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getContractOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetContractOptionsResponse> _callback) throws ApiException {
            return getContractOptionsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves the contract options for the specified change job ID.
     * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetContractOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetContractOptionsRequestBuilder getContractOptions(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetContractOptionsRequestBuilder(ID);
    }
    private okhttp3.Call getContractOptions_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/contract/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractOptions_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getContractOptions_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getContractOptions_0(Async)");
        }

        return getContractOptions_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> getContractOptions_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getContractOptions_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractOptions_0Async(String ID, String subresourceID, final ApiCallback<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractOptions_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractOptions0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetContractOptions0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getContractOptions_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractOptions_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getContractOptions_0 request
         * @return ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 execute() throws ApiException {
            ApiResponse<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> localVarResp = getContractOptions_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContractOptions_0 request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> executeWithHttpInfo() throws ApiException {
            return getContractOptions_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getContractOptions_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> _callback) throws ApiException {
            return getContractOptions_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves the contract options for the specified change job ID.
     * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetContractOptions0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetContractOptions0RequestBuilder getContractOptions_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetContractOptions0RequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getJobClassificationCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/jobClassification"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobClassificationValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getJobClassification(Async)");
        }

        return getJobClassificationCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetJobClassificationResponse> getJobClassificationWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getJobClassificationValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetJobClassificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobClassificationAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetJobClassificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobClassificationValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetJobClassificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobClassificationRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetJobClassificationRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetJobClassificationRequestBuilder
         */
        public GetJobClassificationRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetJobClassificationRequestBuilder
         */
        public GetJobClassificationRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getJobClassification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobClassificationCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getJobClassification request
         * @return JobChangesGetJobClassificationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetJobClassificationResponse execute() throws ApiException {
            ApiResponse<JobChangesGetJobClassificationResponse> localVarResp = getJobClassificationWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobClassification request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetJobClassificationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetJobClassificationResponse> executeWithHttpInfo() throws ApiException {
            return getJobClassificationWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getJobClassification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetJobClassificationResponse> _callback) throws ApiException {
            return getJobClassificationAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a job classification for the specified job change ID.
     * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetJobClassificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobClassificationRequestBuilder getJobClassification(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetJobClassificationRequestBuilder(ID);
    }
    private okhttp3.Call getJobClassification_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/jobClassification/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobClassification_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getJobClassification_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getJobClassification_0(Async)");
        }

        return getJobClassification_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobJobClassificationData354103f196361000084489bcb281017f> getJobClassification_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getJobClassification_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobJobClassificationData354103f196361000084489bcb281017f>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobClassification_0Async(String ID, String subresourceID, final ApiCallback<ChangeJobJobClassificationData354103f196361000084489bcb281017f> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobClassification_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobJobClassificationData354103f196361000084489bcb281017f>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobClassification0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetJobClassification0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getJobClassification_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobClassification_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getJobClassification_0 request
         * @return ChangeJobJobClassificationData354103f196361000084489bcb281017f
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobJobClassificationData354103f196361000084489bcb281017f execute() throws ApiException {
            ApiResponse<ChangeJobJobClassificationData354103f196361000084489bcb281017f> localVarResp = getJobClassification_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobClassification_0 request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobJobClassificationData354103f196361000084489bcb281017f&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobJobClassificationData354103f196361000084489bcb281017f> executeWithHttpInfo() throws ApiException {
            return getJobClassification_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getJobClassification_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobJobClassificationData354103f196361000084489bcb281017f> _callback) throws ApiException {
            return getJobClassification_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a job classification for the specified job change ID.
     * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetJobClassification0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobClassification0RequestBuilder getJobClassification_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetJobClassification0RequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getJobProfileCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/jobProfile"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobProfileValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getJobProfile(Async)");
        }

        return getJobProfileCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetJobProfileResponse> getJobProfileWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getJobProfileValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetJobProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobProfileAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetJobProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobProfileValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetJobProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobProfileRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetJobProfileRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetJobProfileRequestBuilder
         */
        public GetJobProfileRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetJobProfileRequestBuilder
         */
        public GetJobProfileRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getJobProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobProfileCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getJobProfile request
         * @return JobChangesGetJobProfileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetJobProfileResponse execute() throws ApiException {
            ApiResponse<JobChangesGetJobProfileResponse> localVarResp = getJobProfileWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobProfile request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetJobProfileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetJobProfileResponse> executeWithHttpInfo() throws ApiException {
            return getJobProfileWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getJobProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetJobProfileResponse> _callback) throws ApiException {
            return getJobProfileAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a job profile for the specified job change ID.
     * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetJobProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetJobProfileRequestBuilder getJobProfile(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetJobProfileRequestBuilder(ID);
    }
    private okhttp3.Call getLocationInfoCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/location"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationInfoValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getLocationInfo(Async)");
        }

        return getLocationInfoCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetLocationInfoResponse> getLocationInfoWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getLocationInfoValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetLocationInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationInfoAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetLocationInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationInfoValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetLocationInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationInfoRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetLocationInfoRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetLocationInfoRequestBuilder
         */
        public GetLocationInfoRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetLocationInfoRequestBuilder
         */
        public GetLocationInfoRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getLocationInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationInfoCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getLocationInfo request
         * @return JobChangesGetLocationInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetLocationInfoResponse execute() throws ApiException {
            ApiResponse<JobChangesGetLocationInfoResponse> localVarResp = getLocationInfoWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocationInfo request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetLocationInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetLocationInfoResponse> executeWithHttpInfo() throws ApiException {
            return getLocationInfoWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getLocationInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetLocationInfoResponse> _callback) throws ApiException {
            return getLocationInfoAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Returns the location information for the specified job change ID.
     * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetLocationInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationInfoRequestBuilder getLocationInfo(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetLocationInfoRequestBuilder(ID);
    }
    private okhttp3.Call getLocationInfo_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/location/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationInfo_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getLocationInfo_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getLocationInfo_0(Async)");
        }

        return getLocationInfo_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobLocation90151d6c4ff110001b4a46091678025c> getLocationInfo_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getLocationInfo_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobLocation90151d6c4ff110001b4a46091678025c>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationInfo_0Async(String ID, String subresourceID, final ApiCallback<ChangeJobLocation90151d6c4ff110001b4a46091678025c> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationInfo_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobLocation90151d6c4ff110001b4a46091678025c>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationInfo0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetLocationInfo0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getLocationInfo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationInfo_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getLocationInfo_0 request
         * @return ChangeJobLocation90151d6c4ff110001b4a46091678025c
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobLocation90151d6c4ff110001b4a46091678025c execute() throws ApiException {
            ApiResponse<ChangeJobLocation90151d6c4ff110001b4a46091678025c> localVarResp = getLocationInfo_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocationInfo_0 request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobLocation90151d6c4ff110001b4a46091678025c&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobLocation90151d6c4ff110001b4a46091678025c> executeWithHttpInfo() throws ApiException {
            return getLocationInfo_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getLocationInfo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobLocation90151d6c4ff110001b4a46091678025c> _callback) throws ApiException {
            return getLocationInfo_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Returns the location information for the specified job change ID.
     * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetLocationInfo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationInfo0RequestBuilder getLocationInfo_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetLocationInfo0RequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getMoveTeamOptionCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/moveTeam/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMoveTeamOptionValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getMoveTeamOption(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getMoveTeamOption(Async)");
        }

        return getMoveTeamOptionCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> getMoveTeamOptionWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getMoveTeamOptionValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMoveTeamOptionAsync(String ID, String subresourceID, final ApiCallback<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMoveTeamOptionValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMoveTeamOptionRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetMoveTeamOptionRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getMoveTeamOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMoveTeamOptionCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getMoveTeamOption request
         * @return ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 execute() throws ApiException {
            ApiResponse<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> localVarResp = getMoveTeamOptionWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMoveTeamOption request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> executeWithHttpInfo() throws ApiException {
            return getMoveTeamOptionWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getMoveTeamOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> _callback) throws ApiException {
            return getMoveTeamOptionAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a move team option from the specified job change ID.
     * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager&#39;s Team  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetMoveTeamOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetMoveTeamOptionRequestBuilder getMoveTeamOption(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetMoveTeamOptionRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getMoveTeamOption_0Call(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/moveTeam"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMoveTeamOption_0ValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getMoveTeamOption_0(Async)");
        }

        return getMoveTeamOption_0Call(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetMoveTeamOptionResponse> getMoveTeamOption_0WithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getMoveTeamOption_0ValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetMoveTeamOptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMoveTeamOption_0Async(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetMoveTeamOptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMoveTeamOption_0ValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetMoveTeamOptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMoveTeamOption0RequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetMoveTeamOption0RequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetMoveTeamOption0RequestBuilder
         */
        public GetMoveTeamOption0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetMoveTeamOption0RequestBuilder
         */
        public GetMoveTeamOption0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getMoveTeamOption_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMoveTeamOption_0Call(ID, limit, offset, _callback);
        }


        /**
         * Execute getMoveTeamOption_0 request
         * @return JobChangesGetMoveTeamOptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetMoveTeamOptionResponse execute() throws ApiException {
            ApiResponse<JobChangesGetMoveTeamOptionResponse> localVarResp = getMoveTeamOption_0WithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMoveTeamOption_0 request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetMoveTeamOptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetMoveTeamOptionResponse> executeWithHttpInfo() throws ApiException {
            return getMoveTeamOption_0WithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getMoveTeamOption_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetMoveTeamOptionResponse> _callback) throws ApiException {
            return getMoveTeamOption_0Async(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a move team option from the specified job change ID.
     * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager&#39;s Team  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetMoveTeamOption0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetMoveTeamOption0RequestBuilder getMoveTeamOption_0(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetMoveTeamOption0RequestBuilder(ID);
    }
    private okhttp3.Call getOpeningOptionsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/opening"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpeningOptionsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getOpeningOptions(Async)");
        }

        return getOpeningOptionsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetOpeningOptionsResponse> getOpeningOptionsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getOpeningOptionsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetOpeningOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOpeningOptionsAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetOpeningOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOpeningOptionsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetOpeningOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOpeningOptionsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetOpeningOptionsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetOpeningOptionsRequestBuilder
         */
        public GetOpeningOptionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetOpeningOptionsRequestBuilder
         */
        public GetOpeningOptionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getOpeningOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOpeningOptionsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getOpeningOptions request
         * @return JobChangesGetOpeningOptionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetOpeningOptionsResponse execute() throws ApiException {
            ApiResponse<JobChangesGetOpeningOptionsResponse> localVarResp = getOpeningOptionsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOpeningOptions request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetOpeningOptionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetOpeningOptionsResponse> executeWithHttpInfo() throws ApiException {
            return getOpeningOptionsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getOpeningOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetOpeningOptionsResponse> _callback) throws ApiException {
            return getOpeningOptionsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves the opening options for the specified job change ID.
     * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetOpeningOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOpeningOptionsRequestBuilder getOpeningOptions(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetOpeningOptionsRequestBuilder(ID);
    }
    private okhttp3.Call getOpeningOptions_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/opening/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpeningOptions_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getOpeningOptions_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getOpeningOptions_0(Async)");
        }

        return getOpeningOptions_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> getOpeningOptions_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getOpeningOptions_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobOpeningData97af9049a5fd10001c4888d654170000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOpeningOptions_0Async(String ID, String subresourceID, final ApiCallback<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOpeningOptions_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobOpeningData97af9049a5fd10001c4888d654170000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOpeningOptions0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetOpeningOptions0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getOpeningOptions_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOpeningOptions_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getOpeningOptions_0 request
         * @return ChangeJobOpeningData97af9049a5fd10001c4888d654170000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobOpeningData97af9049a5fd10001c4888d654170000 execute() throws ApiException {
            ApiResponse<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> localVarResp = getOpeningOptions_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOpeningOptions_0 request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobOpeningData97af9049a5fd10001c4888d654170000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> executeWithHttpInfo() throws ApiException {
            return getOpeningOptions_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getOpeningOptions_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> _callback) throws ApiException {
            return getOpeningOptions_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves the opening options for the specified job change ID.
     * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetOpeningOptions0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOpeningOptions0RequestBuilder getOpeningOptions_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetOpeningOptions0RequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getPositionByIdCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/position"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPositionByIdValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPositionById(Async)");
        }

        return getPositionByIdCall(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetPositionByIdResponse> getPositionByIdWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPositionByIdValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetPositionByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPositionByIdAsync(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetPositionByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPositionByIdValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetPositionByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPositionByIdRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetPositionByIdRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPositionByIdRequestBuilder
         */
        public GetPositionByIdRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPositionByIdRequestBuilder
         */
        public GetPositionByIdRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPositionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPositionByIdCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getPositionById request
         * @return JobChangesGetPositionByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetPositionByIdResponse execute() throws ApiException {
            ApiResponse<JobChangesGetPositionByIdResponse> localVarResp = getPositionByIdWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPositionById request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetPositionByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetPositionByIdResponse> executeWithHttpInfo() throws ApiException {
            return getPositionByIdWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getPositionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetPositionByIdResponse> _callback) throws ApiException {
            return getPositionByIdAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a position for the specified job change ID.
     * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetPositionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPositionByIdRequestBuilder getPositionById(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetPositionByIdRequestBuilder(ID);
    }
    private okhttp3.Call getPositionBySubresourceIdCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/position/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPositionBySubresourceIdValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPositionBySubresourceId(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getPositionBySubresourceId(Async)");
        }

        return getPositionBySubresourceIdCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> getPositionBySubresourceIdWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getPositionBySubresourceIdValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPositionBySubresourceIdAsync(String ID, String subresourceID, final ApiCallback<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPositionBySubresourceIdValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPositionBySubresourceIdRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetPositionBySubresourceIdRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getPositionBySubresourceId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPositionBySubresourceIdCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getPositionBySubresourceId request
         * @return ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 execute() throws ApiException {
            ApiResponse<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> localVarResp = getPositionBySubresourceIdWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPositionBySubresourceId request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> executeWithHttpInfo() throws ApiException {
            return getPositionBySubresourceIdWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getPositionBySubresourceId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> _callback) throws ApiException {
            return getPositionBySubresourceIdAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a position for the specified job change ID.
     * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetPositionBySubresourceIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPositionBySubresourceIdRequestBuilder getPositionBySubresourceId(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetPositionBySubresourceIdRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getProfileCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/jobProfile/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getProfile(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getProfile(Async)");
        }

        return getProfileCall(ID, subresourceID, _callback);

    }


    private ApiResponse<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> getProfileWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getProfileValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileAsync(String ID, String subresourceID, final ApiCallback<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetProfileRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getProfile request
         * @return ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 execute() throws ApiException {
            ApiResponse<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> localVarResp = getProfileWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfile request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> executeWithHttpInfo() throws ApiException {
            return getProfileWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> _callback) throws ApiException {
            return getProfileAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a job profile for the specified job change ID.
     * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetProfileRequestBuilder getProfile(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetProfileRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getStartDetailsCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/startDetails/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStartDetailsValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStartDetails(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getStartDetails(Async)");
        }

        return getStartDetailsCall(ID, subresourceID, _callback);

    }


    private ApiResponse<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> getStartDetailsWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getStartDetailsValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStartDetailsAsync(String ID, String subresourceID, final ApiCallback<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStartDetailsValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStartDetailsRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetStartDetailsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getStartDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStartDetailsCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getStartDetails request
         * @return JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 execute() throws ApiException {
            ApiResponse<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> localVarResp = getStartDetailsWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStartDetails request with HTTP info returned
         * @return ApiResponse&lt;JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> executeWithHttpInfo() throws ApiException {
            return getStartDetailsWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getStartDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> _callback) throws ApiException {
            return getStartDetailsAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves the start details for the specified job change ID.
     * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetStartDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStartDetailsRequestBuilder getStartDetails(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetStartDetailsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getStartDetails_0Call(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/startDetails"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStartDetails_0ValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStartDetails_0(Async)");
        }

        return getStartDetails_0Call(ID, limit, offset, _callback);

    }


    private ApiResponse<JobChangesGetStartDetailsResponse> getStartDetails_0WithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getStartDetails_0ValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<JobChangesGetStartDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStartDetails_0Async(String ID, Long limit, Long offset, final ApiCallback<JobChangesGetStartDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStartDetails_0ValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<JobChangesGetStartDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStartDetails0RequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetStartDetails0RequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetStartDetails0RequestBuilder
         */
        public GetStartDetails0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetStartDetails0RequestBuilder
         */
        public GetStartDetails0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getStartDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStartDetails_0Call(ID, limit, offset, _callback);
        }


        /**
         * Execute getStartDetails_0 request
         * @return JobChangesGetStartDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesGetStartDetailsResponse execute() throws ApiException {
            ApiResponse<JobChangesGetStartDetailsResponse> localVarResp = getStartDetails_0WithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStartDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;JobChangesGetStartDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesGetStartDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getStartDetails_0WithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getStartDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesGetStartDetailsResponse> _callback) throws ApiException {
            return getStartDetails_0Async(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves the start details for the specified job change ID.
     * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetStartDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStartDetails0RequestBuilder getStartDetails_0(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetStartDetails0RequestBuilder(ID);
    }
    private okhttp3.Call partialUpdateLocationOptionsCall(String ID, String subresourceID, ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobLocation90151d6c4ff110001b4a46091678025c;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/location/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateLocationOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling partialUpdateLocationOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling partialUpdateLocationOptions(Async)");
        }

        // verify the required parameter 'changeJobLocation90151d6c4ff110001b4a46091678025c' is set
        if (changeJobLocation90151d6c4ff110001b4a46091678025c == null) {
            throw new ApiException("Missing the required parameter 'changeJobLocation90151d6c4ff110001b4a46091678025c' when calling partialUpdateLocationOptions(Async)");
        }

        return partialUpdateLocationOptionsCall(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c, _callback);

    }


    private ApiResponse<ChangeJobLocation90151d6c4ff110001b4a46091678025c> partialUpdateLocationOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateLocationOptionsValidateBeforeCall(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c, null);
        Type localVarReturnType = new TypeToken<ChangeJobLocation90151d6c4ff110001b4a46091678025c>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partialUpdateLocationOptionsAsync(String ID, String subresourceID, ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c, final ApiCallback<ChangeJobLocation90151d6c4ff110001b4a46091678025c> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateLocationOptionsValidateBeforeCall(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobLocation90151d6c4ff110001b4a46091678025c>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartialUpdateLocationOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Location90151d6c4ff110001bfa027116820278 location;
        private Integer scheduledHours;
        private WorkShift0ee7bb8b41db1000143d4e4822174f2e workShift;
        private WorkSpace0ee7bb8b41db10001e7db6a6c3e55663 workSpace;

        private PartialUpdateLocationOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set location
         * @param location  (optional)
         * @return PartialUpdateLocationOptionsRequestBuilder
         */
        public PartialUpdateLocationOptionsRequestBuilder location(Location90151d6c4ff110001bfa027116820278 location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set scheduledHours
         * @param scheduledHours The new scheduled hours for the worker as of the effective date. (optional)
         * @return PartialUpdateLocationOptionsRequestBuilder
         */
        public PartialUpdateLocationOptionsRequestBuilder scheduledHours(Integer scheduledHours) {
            this.scheduledHours = scheduledHours;
            return this;
        }
        
        /**
         * Set workShift
         * @param workShift  (optional)
         * @return PartialUpdateLocationOptionsRequestBuilder
         */
        public PartialUpdateLocationOptionsRequestBuilder workShift(WorkShift0ee7bb8b41db1000143d4e4822174f2e workShift) {
            this.workShift = workShift;
            return this;
        }
        
        /**
         * Set workSpace
         * @param workSpace  (optional)
         * @return PartialUpdateLocationOptionsRequestBuilder
         */
        public PartialUpdateLocationOptionsRequestBuilder workSpace(WorkSpace0ee7bb8b41db10001e7db6a6c3e55663 workSpace) {
            this.workSpace = workSpace;
            return this;
        }
        
        /**
         * Build call for partialUpdateLocationOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c = buildBodyParams();
            return partialUpdateLocationOptionsCall(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c, _callback);
        }

        private ChangeJobLocation90151d6c4ff110001b4a46091678025c buildBodyParams() {
            ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c = new ChangeJobLocation90151d6c4ff110001b4a46091678025c();
            return changeJobLocation90151d6c4ff110001b4a46091678025c;
        }

        /**
         * Execute partialUpdateLocationOptions request
         * @return ChangeJobLocation90151d6c4ff110001b4a46091678025c
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobLocation90151d6c4ff110001b4a46091678025c execute() throws ApiException {
            ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c = buildBodyParams();
            ApiResponse<ChangeJobLocation90151d6c4ff110001b4a46091678025c> localVarResp = partialUpdateLocationOptionsWithHttpInfo(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partialUpdateLocationOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobLocation90151d6c4ff110001b4a46091678025c&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobLocation90151d6c4ff110001b4a46091678025c> executeWithHttpInfo() throws ApiException {
            ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c = buildBodyParams();
            return partialUpdateLocationOptionsWithHttpInfo(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c);
        }

        /**
         * Execute partialUpdateLocationOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobLocation90151d6c4ff110001b4a46091678025c> _callback) throws ApiException {
            ChangeJobLocation90151d6c4ff110001b4a46091678025c changeJobLocation90151d6c4ff110001b4a46091678025c = buildBodyParams();
            return partialUpdateLocationOptionsAsync(ID, subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c, _callback);
        }
    }

    /**
     * Partially updates the location options for the specified change job ID.
     * Partially updates the location options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/location/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this request field: location{id}.   To retrieve a location ID, you can call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to locations by location categories for the staffingEvent. You can filter the results by effectiveDate. By default, it returns locations on the current date.   To retrieve a workShift ID, call the GET /values/jobChangesGroup/workShifts prompt endpoint with the location query parameter. It returns work shifts by location. If you don&#39;t specify the location parameter, it returns an empty result.  To retrieve a workSpace ID, call the GET /values/jobChangesGroup/workSpaces prompt endpoint with the location query parameter. It returns HREF links to workspaces by configured prompt categories for the specified location. You can filter the results by effectiveDate. By default, it returns workspaces on the current date.  Secured by: Staffing Actions: Location  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobLocation90151d6c4ff110001b4a46091678025c  (required)
     * @return PartialUpdateLocationOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PartialUpdateLocationOptionsRequestBuilder partialUpdateLocationOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new PartialUpdateLocationOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call partiallyUpdateContractOptionsCall(String ID, String subresourceID, ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobContractDetailsData27ec818d10d010000386ce823ac20107;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/contract/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateContractOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling partiallyUpdateContractOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling partiallyUpdateContractOptions(Async)");
        }

        // verify the required parameter 'changeJobContractDetailsData27ec818d10d010000386ce823ac20107' is set
        if (changeJobContractDetailsData27ec818d10d010000386ce823ac20107 == null) {
            throw new ApiException("Missing the required parameter 'changeJobContractDetailsData27ec818d10d010000386ce823ac20107' when calling partiallyUpdateContractOptions(Async)");
        }

        return partiallyUpdateContractOptionsCall(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107, _callback);

    }


    private ApiResponse<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> partiallyUpdateContractOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateContractOptionsValidateBeforeCall(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107, null);
        Type localVarReturnType = new TypeToken<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateContractOptionsAsync(String ID, String subresourceID, ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107, final ApiCallback<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateContractOptionsValidateBeforeCall(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateContractOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String assignmentDetails;
        private LocalDate contractEndDate;
        private Object contractPayRate;
        private Currency2d0ca2cb2448100009c54386a8570e07 currency;
        private Frequency2d0ca2cb2448100009c5436d5d670e06 frequency;
        private PurchaseOrder2d0ca2cb2448100009c5433bcff60e05 purchaseOrder;

        private PartiallyUpdateContractOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set assignmentDetails
         * @param assignmentDetails The new contract assignment details for the contingent worker as of the effective date. (optional)
         * @return PartiallyUpdateContractOptionsRequestBuilder
         */
        public PartiallyUpdateContractOptionsRequestBuilder assignmentDetails(String assignmentDetails) {
            this.assignmentDetails = assignmentDetails;
            return this;
        }
        
        /**
         * Set contractEndDate
         * @param contractEndDate The contract end date for the position as of this business process. (optional)
         * @return PartiallyUpdateContractOptionsRequestBuilder
         */
        public PartiallyUpdateContractOptionsRequestBuilder contractEndDate(LocalDate contractEndDate) {
            this.contractEndDate = contractEndDate;
            return this;
        }
        
        /**
         * Set contractPayRate
         * @param contractPayRate The new contract pay rate for the contingent worker as of the effective date. (optional)
         * @return PartiallyUpdateContractOptionsRequestBuilder
         */
        public PartiallyUpdateContractOptionsRequestBuilder contractPayRate(Object contractPayRate) {
            this.contractPayRate = contractPayRate;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return PartiallyUpdateContractOptionsRequestBuilder
         */
        public PartiallyUpdateContractOptionsRequestBuilder currency(Currency2d0ca2cb2448100009c54386a8570e07 currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return PartiallyUpdateContractOptionsRequestBuilder
         */
        public PartiallyUpdateContractOptionsRequestBuilder frequency(Frequency2d0ca2cb2448100009c5436d5d670e06 frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set purchaseOrder
         * @param purchaseOrder  (optional)
         * @return PartiallyUpdateContractOptionsRequestBuilder
         */
        public PartiallyUpdateContractOptionsRequestBuilder purchaseOrder(PurchaseOrder2d0ca2cb2448100009c5433bcff60e05 purchaseOrder) {
            this.purchaseOrder = purchaseOrder;
            return this;
        }
        
        /**
         * Build call for partiallyUpdateContractOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107 = buildBodyParams();
            return partiallyUpdateContractOptionsCall(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107, _callback);
        }

        private ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 buildBodyParams() {
            ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107 = new ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107();
            return changeJobContractDetailsData27ec818d10d010000386ce823ac20107;
        }

        /**
         * Execute partiallyUpdateContractOptions request
         * @return ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 execute() throws ApiException {
            ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107 = buildBodyParams();
            ApiResponse<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> localVarResp = partiallyUpdateContractOptionsWithHttpInfo(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdateContractOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> executeWithHttpInfo() throws ApiException {
            ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107 = buildBodyParams();
            return partiallyUpdateContractOptionsWithHttpInfo(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107);
        }

        /**
         * Execute partiallyUpdateContractOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> _callback) throws ApiException {
            ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 changeJobContractDetailsData27ec818d10d010000386ce823ac20107 = buildBodyParams();
            return partiallyUpdateContractOptionsAsync(ID, subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107, _callback);
        }
    }

    /**
     * Partially updates the contract options for the specified change job ID.
     * Partially updates the contract details options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/contract/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.   To retrieve a frequency ID, call the GET /values/jobChangesGroup/frequencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all frequencies based on staffing event for contingent workers. By default, it returns all frequencies in the tenant.  To retrieve a currency ID, call the GET /values/jobChangesGroup/currencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to active currencies by prompt category. By default, it returns all active currencies.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobContractDetailsData27ec818d10d010000386ce823ac20107  (required)
     * @return PartiallyUpdateContractOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateContractOptionsRequestBuilder partiallyUpdateContractOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new PartiallyUpdateContractOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call submitChangeJobCall(String ID, EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventState54e611eca2c910000fbc4579181c0111;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/submit"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitChangeJobValidateBeforeCall(String ID, EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling submitChangeJob(Async)");
        }

        // verify the required parameter 'eventState54e611eca2c910000fbc4579181c0111' is set
        if (eventState54e611eca2c910000fbc4579181c0111 == null) {
            throw new ApiException("Missing the required parameter 'eventState54e611eca2c910000fbc4579181c0111' when calling submitChangeJob(Async)");
        }

        return submitChangeJobCall(ID, eventState54e611eca2c910000fbc4579181c0111, _callback);

    }


    private ApiResponse<EventState54e611eca2c910000fbc4579181c0111> submitChangeJobWithHttpInfo(String ID, EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111) throws ApiException {
        okhttp3.Call localVarCall = submitChangeJobValidateBeforeCall(ID, eventState54e611eca2c910000fbc4579181c0111, null);
        Type localVarReturnType = new TypeToken<EventState54e611eca2c910000fbc4579181c0111>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitChangeJobAsync(String ID, EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111, final ApiCallback<EventState54e611eca2c910000fbc4579181c0111> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitChangeJobValidateBeforeCall(ID, eventState54e611eca2c910000fbc4579181c0111, _callback);
        Type localVarReturnType = new TypeToken<EventState54e611eca2c910000fbc4579181c0111>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitChangeJobRequestBuilder {
        private final String ID;
        private BusinessProcessParameters5afc0b4b5a4610002aaebb8180cd2261 businessProcessParameters;
        private Status54e611eca2c910000fbc4599be0b0112 status;
        private String validation;
        private String id;
        private String descriptor;

        private SubmitChangeJobRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set businessProcessParameters
         * @param businessProcessParameters  (optional)
         * @return SubmitChangeJobRequestBuilder
         */
        public SubmitChangeJobRequestBuilder businessProcessParameters(BusinessProcessParameters5afc0b4b5a4610002aaebb8180cd2261 businessProcessParameters) {
            this.businessProcessParameters = businessProcessParameters;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return SubmitChangeJobRequestBuilder
         */
        public SubmitChangeJobRequestBuilder status(Status54e611eca2c910000fbc4599be0b0112 status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set validation
         * @param validation Validation message for an action event triggered by a condition. (optional)
         * @return SubmitChangeJobRequestBuilder
         */
        public SubmitChangeJobRequestBuilder validation(String validation) {
            this.validation = validation;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return SubmitChangeJobRequestBuilder
         */
        public SubmitChangeJobRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return SubmitChangeJobRequestBuilder
         */
        public SubmitChangeJobRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for submitChangeJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111 = buildBodyParams();
            return submitChangeJobCall(ID, eventState54e611eca2c910000fbc4579181c0111, _callback);
        }

        private EventState54e611eca2c910000fbc4579181c0111 buildBodyParams() {
            EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111 = new EventState54e611eca2c910000fbc4579181c0111();
            return eventState54e611eca2c910000fbc4579181c0111;
        }

        /**
         * Execute submitChangeJob request
         * @return EventState54e611eca2c910000fbc4579181c0111
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public EventState54e611eca2c910000fbc4579181c0111 execute() throws ApiException {
            EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111 = buildBodyParams();
            ApiResponse<EventState54e611eca2c910000fbc4579181c0111> localVarResp = submitChangeJobWithHttpInfo(ID, eventState54e611eca2c910000fbc4579181c0111);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitChangeJob request with HTTP info returned
         * @return ApiResponse&lt;EventState54e611eca2c910000fbc4579181c0111&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventState54e611eca2c910000fbc4579181c0111> executeWithHttpInfo() throws ApiException {
            EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111 = buildBodyParams();
            return submitChangeJobWithHttpInfo(ID, eventState54e611eca2c910000fbc4579181c0111);
        }

        /**
         * Execute submitChangeJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventState54e611eca2c910000fbc4579181c0111> _callback) throws ApiException {
            EventState54e611eca2c910000fbc4579181c0111 eventState54e611eca2c910000fbc4579181c0111 = buildBodyParams();
            return submitChangeJobAsync(ID, eventState54e611eca2c910000fbc4579181c0111, _callback);
        }
    }

    /**
     * Submit the specified change job ID.
     * Submits the specified change job ID.   To submit the Change Job event and initiate the Change Job business process, specify an empty request body: {}. To save for later, specify this request body: {     \&quot;businessProcessParameters\&quot;: {         \&quot;action\&quot;:{             \&quot;id\&quot;: \&quot;d9e41a8c446c11de98360015c5e6daf6\&quot;         }     } }  The action id value is the Workday ID of the \&quot;Save for Later\&quot; action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Change Job event using the REST APIs. The user with correct permissions can edit and submit the saved Change Job event in the Workday UI.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param eventState54e611eca2c910000fbc4579181c0111  (required)
     * @return SubmitChangeJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitChangeJobRequestBuilder submitChangeJob(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new SubmitChangeJobRequestBuilder(ID);
    }
    private okhttp3.Call updateAdministrativeOptionsCall(String ID, String subresourceID, ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/administrative/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdministrativeOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateAdministrativeOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateAdministrativeOptions(Async)");
        }

        // verify the required parameter 'changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea' is set
        if (changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea == null) {
            throw new ApiException("Missing the required parameter 'changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea' when calling updateAdministrativeOptions(Async)");
        }

        return updateAdministrativeOptionsCall(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, _callback);

    }


    private ApiResponse<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> updateAdministrativeOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea) throws ApiException {
        okhttp3.Call localVarCall = updateAdministrativeOptionsValidateBeforeCall(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, null);
        Type localVarReturnType = new TypeToken<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAdministrativeOptionsAsync(String ID, String subresourceID, ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, final ApiCallback<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdministrativeOptionsValidateBeforeCall(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAdministrativeOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private PayRateTypeD25283821c01100016756a14eb650000 payRateType;
        private WorkersCompensationCodeOverride05d4c45042b61000138500e185e0013f workersCompensationCodeOverride;
        private Integer fte;
        private LocalDate notifyBy;
        private List<ChangeJobCompanyInsiderTypesData05d4c45042b61000131e4b2132f30137> companyInsiderTypes;
        private LocalDate firstDayOfWork;
        private Integer defaultWeeklyHours;
        private PositionWorkerType05d4c45042b610001030ee47f2c90118 positionWorkerType;
        private Integer workingFte;
        private Boolean specifyWorkingFte;
        private TimeType05d4c45042b610000bb540b7458e0108 timeType;
        private Boolean specifyPaidFte;
        private Integer paidFte;
        private WorkStudy05d4c45042b610000ba2f83c70f30101 workStudy;
        private AssignmentType23929e1f68ca10000d6940d6bde56963 assignmentType;
        private LocalDate endEmploymentDate;
        private LocalDate expectedAssignmentEndDate;

        private UpdateAdministrativeOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set payRateType
         * @param payRateType  (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder payRateType(PayRateTypeD25283821c01100016756a14eb650000 payRateType) {
            this.payRateType = payRateType;
            return this;
        }
        
        /**
         * Set workersCompensationCodeOverride
         * @param workersCompensationCodeOverride  (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder workersCompensationCodeOverride(WorkersCompensationCodeOverride05d4c45042b61000138500e185e0013f workersCompensationCodeOverride) {
            this.workersCompensationCodeOverride = workersCompensationCodeOverride;
            return this;
        }
        
        /**
         * Set fte
         * @param fte Full Time Equivalent for a worker calculated by scheduled weekly hours divided by default weekly hours either current or proposed. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder fte(Integer fte) {
            this.fte = fte;
            return this;
        }
        
        /**
         * Set notifyBy
         * @param notifyBy Returns the date that the employee should be notified for a termination. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder notifyBy(LocalDate notifyBy) {
            this.notifyBy = notifyBy;
            return this;
        }
        
        /**
         * Set companyInsiderTypes
         * @param companyInsiderTypes The new company insider types for the worker as of the effective date. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder companyInsiderTypes(List<ChangeJobCompanyInsiderTypesData05d4c45042b61000131e4b2132f30137> companyInsiderTypes) {
            this.companyInsiderTypes = companyInsiderTypes;
            return this;
        }
        
        /**
         * Set firstDayOfWork
         * @param firstDayOfWork The first day of work for the worker, as specified on the Hire, Add International Assignment, or Add Job transaction. This field will not return a value for any other transaction. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder firstDayOfWork(LocalDate firstDayOfWork) {
            this.firstDayOfWork = firstDayOfWork;
            return this;
        }
        
        /**
         * Set defaultWeeklyHours
         * @param defaultWeeklyHours The new default weekly hours for the worker as of the effective date. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder defaultWeeklyHours(Integer defaultWeeklyHours) {
            this.defaultWeeklyHours = defaultWeeklyHours;
            return this;
        }
        
        /**
         * Set positionWorkerType
         * @param positionWorkerType  (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder positionWorkerType(PositionWorkerType05d4c45042b610001030ee47f2c90118 positionWorkerType) {
            this.positionWorkerType = positionWorkerType;
            return this;
        }
        
        /**
         * Set workingFte
         * @param workingFte The working full time equivalent for the worker as of the effective date. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder workingFte(Integer workingFte) {
            this.workingFte = workingFte;
            return this;
        }
        
        /**
         * Set specifyWorkingFte
         * @param specifyWorkingFte True if working full time equivalent is specified on a worker as of the effective date. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder specifyWorkingFte(Boolean specifyWorkingFte) {
            this.specifyWorkingFte = specifyWorkingFte;
            return this;
        }
        
        /**
         * Set timeType
         * @param timeType  (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder timeType(TimeType05d4c45042b610000bb540b7458e0108 timeType) {
            this.timeType = timeType;
            return this;
        }
        
        /**
         * Set specifyPaidFte
         * @param specifyPaidFte True if paid full time equivalent is specified on a worker as of the effective date. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder specifyPaidFte(Boolean specifyPaidFte) {
            this.specifyPaidFte = specifyPaidFte;
            return this;
        }
        
        /**
         * Set paidFte
         * @param paidFte The paid full time equivalent for the worker as of the effective date. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder paidFte(Integer paidFte) {
            this.paidFte = paidFte;
            return this;
        }
        
        /**
         * Set workStudy
         * @param workStudy  (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder workStudy(WorkStudy05d4c45042b610000ba2f83c70f30101 workStudy) {
            this.workStudy = workStudy;
            return this;
        }
        
        /**
         * Set assignmentType
         * @param assignmentType  (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder assignmentType(AssignmentType23929e1f68ca10000d6940d6bde56963 assignmentType) {
            this.assignmentType = assignmentType;
            return this;
        }
        
        /**
         * Set endEmploymentDate
         * @param endEmploymentDate The new End Employment Date for the worker. If the worker has an Employee Contract sub event, this field will return that end date instead. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder endEmploymentDate(LocalDate endEmploymentDate) {
            this.endEmploymentDate = endEmploymentDate;
            return this;
        }
        
        /**
         * Set expectedAssignmentEndDate
         * @param expectedAssignmentEndDate For a past or current business process, the value of the Expected Assignment End Date field that is being (or was) proposed in the process. (optional)
         * @return UpdateAdministrativeOptionsRequestBuilder
         */
        public UpdateAdministrativeOptionsRequestBuilder expectedAssignmentEndDate(LocalDate expectedAssignmentEndDate) {
            this.expectedAssignmentEndDate = expectedAssignmentEndDate;
            return this;
        }
        
        /**
         * Build call for updateAdministrativeOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea = buildBodyParams();
            return updateAdministrativeOptionsCall(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, _callback);
        }

        private ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea buildBodyParams() {
            ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea = new ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea();
            return changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea;
        }

        /**
         * Execute updateAdministrativeOptions request
         * @return ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea execute() throws ApiException {
            ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea = buildBodyParams();
            ApiResponse<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> localVarResp = updateAdministrativeOptionsWithHttpInfo(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAdministrativeOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> executeWithHttpInfo() throws ApiException {
            ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea = buildBodyParams();
            return updateAdministrativeOptionsWithHttpInfo(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea);
        }

        /**
         * Execute updateAdministrativeOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> _callback) throws ApiException {
            ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea = buildBodyParams();
            return updateAdministrativeOptionsAsync(ID, subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, _callback);
        }
    }

    /**
     * Partially updates the administrative options for the specified job change ID.
     * Partially updates the administrative options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/administrative/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Note that there are no localization constraints in this API version. You can update the workingFTE and paidFTE fields even if the fields have not been localized.  To retrieve a positionWorkerType ID, you can call the GET /values/jobChangesGroup/employeeTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to employee types by country. By default, it returns all employee types, excluding contingent workers.  For the positionWorkerType ID, you can also call the GET /values/jobChangesGroup/contingentWorkerTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to contingent worker types for staffing event. If you specify location, it returns HREF links to contingent worker types by location or country. By default, it returns all contingent worker types.  To retrieve a workersCompensationCodeOverride ID, call the GET /values/jobChangesGroup/workersCompensationCodeOverrides prompt endpoint, which takes the job change ID as the staffing Event query parameter.   To retrieve a payRateType ID, call the GET /values/jobChangesGroup/payRateTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all pay rate types based on staffing event for contingent workers. By default, it returns all pay rate types in the tenant.   To retrieve companyInsiderType IDs, call the GET /values/jobChangesGroup/companyInsiderTypes prompt endpoint, which returns all company insider types in the tenant.   To retrieve an assignmentType ID, call the GET /values/jobChangesGroup/assignmentTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns assignmentTypes for the staffingEvent. By default, it returns all active assignment types.  To retrieve a workStudy ID, call the GET /values/jobChangesGroup/workStudyAwards prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns work study awards for the staffingEvent. By default, it returns all work studies in the tenant.  To retrieve a timeType ID, call the GET /values/jobChangesGroup/timeTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns time types for the staffingEvent. By default, it returns all time types based on the Relax Hiring Restrictions tenant configuration.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea  (required)
     * @return UpdateAdministrativeOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAdministrativeOptionsRequestBuilder updateAdministrativeOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateAdministrativeOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateBusinessTitleOptionsCall(String ID, String subresourceID, ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/businessTitle/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBusinessTitleOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateBusinessTitleOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateBusinessTitleOptions(Async)");
        }

        // verify the required parameter 'changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102' is set
        if (changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 == null) {
            throw new ApiException("Missing the required parameter 'changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102' when calling updateBusinessTitleOptions(Async)");
        }

        return updateBusinessTitleOptionsCall(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, _callback);

    }


    private ApiResponse<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> updateBusinessTitleOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102) throws ApiException {
        okhttp3.Call localVarCall = updateBusinessTitleOptionsValidateBeforeCall(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, null);
        Type localVarReturnType = new TypeToken<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBusinessTitleOptionsAsync(String ID, String subresourceID, ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, final ApiCallback<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBusinessTitleOptionsValidateBeforeCall(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBusinessTitleOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String businessTitle;

        private UpdateBusinessTitleOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set businessTitle
         * @param businessTitle The new business title for the worker as of the effective date.  If there is no business title override, this field defaults to the job title or job profile name. (optional)
         * @return UpdateBusinessTitleOptionsRequestBuilder
         */
        public UpdateBusinessTitleOptionsRequestBuilder businessTitle(String businessTitle) {
            this.businessTitle = businessTitle;
            return this;
        }
        
        /**
         * Build call for updateBusinessTitleOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 = buildBodyParams();
            return updateBusinessTitleOptionsCall(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, _callback);
        }

        private ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 buildBodyParams() {
            ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 = new ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102();
            return changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102;
        }

        /**
         * Execute updateBusinessTitleOptions request
         * @return ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 execute() throws ApiException {
            ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 = buildBodyParams();
            ApiResponse<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> localVarResp = updateBusinessTitleOptionsWithHttpInfo(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBusinessTitleOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> executeWithHttpInfo() throws ApiException {
            ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 = buildBodyParams();
            return updateBusinessTitleOptionsWithHttpInfo(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102);
        }

        /**
         * Execute updateBusinessTitleOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> _callback) throws ApiException {
            ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 = buildBodyParams();
            return updateBusinessTitleOptionsAsync(ID, subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, _callback);
        }
    }

    /**
     * Partially updates the businessTitle options for the specified change job ID.
     * Partially updates the businessTitle options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/businessTitle/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102  (required)
     * @return UpdateBusinessTitleOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBusinessTitleOptionsRequestBuilder updateBusinessTitleOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateBusinessTitleOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateCommentCall(String ID, String subresourceID, Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = comments7d98fd55aeee100022968e52a1b31c60;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/comment/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(String ID, String subresourceID, Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateComment(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateComment(Async)");
        }

        // verify the required parameter 'comments7d98fd55aeee100022968e52a1b31c60' is set
        if (comments7d98fd55aeee100022968e52a1b31c60 == null) {
            throw new ApiException("Missing the required parameter 'comments7d98fd55aeee100022968e52a1b31c60' when calling updateComment(Async)");
        }

        return updateCommentCall(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60, _callback);

    }


    private ApiResponse<Comments7d98fd55aeee100022968e52a1b31c60> updateCommentWithHttpInfo(String ID, String subresourceID, Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60, null);
        Type localVarReturnType = new TypeToken<Comments7d98fd55aeee100022968e52a1b31c60>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCommentAsync(String ID, String subresourceID, Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60, final ApiCallback<Comments7d98fd55aeee100022968e52a1b31c60> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60, _callback);
        Type localVarReturnType = new TypeToken<Comments7d98fd55aeee100022968e52a1b31c60>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCommentRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String comment;

        private UpdateCommentRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set comment
         * @param comment The business process comment for a worker event before it&#39;s submitted. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for updateComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60 = buildBodyParams();
            return updateCommentCall(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60, _callback);
        }

        private Comments7d98fd55aeee100022968e52a1b31c60 buildBodyParams() {
            Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60 = new Comments7d98fd55aeee100022968e52a1b31c60();
            return comments7d98fd55aeee100022968e52a1b31c60;
        }

        /**
         * Execute updateComment request
         * @return Comments7d98fd55aeee100022968e52a1b31c60
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Comments7d98fd55aeee100022968e52a1b31c60 execute() throws ApiException {
            Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60 = buildBodyParams();
            ApiResponse<Comments7d98fd55aeee100022968e52a1b31c60> localVarResp = updateCommentWithHttpInfo(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateComment request with HTTP info returned
         * @return ApiResponse&lt;Comments7d98fd55aeee100022968e52a1b31c60&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comments7d98fd55aeee100022968e52a1b31c60> executeWithHttpInfo() throws ApiException {
            Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60 = buildBodyParams();
            return updateCommentWithHttpInfo(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60);
        }

        /**
         * Execute updateComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comments7d98fd55aeee100022968e52a1b31c60> _callback) throws ApiException {
            Comments7d98fd55aeee100022968e52a1b31c60 comments7d98fd55aeee100022968e52a1b31c60 = buildBodyParams();
            return updateCommentAsync(ID, subresourceID, comments7d98fd55aeee100022968e52a1b31c60, _callback);
        }
    }

    /**
     * Partially updates the comment for the specified change job ID.
     * Updates the comment for the specified change job ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  You can call GET /jobChanges/{ID}/comment/{subResourceID} to get the existing data to update.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param comments7d98fd55aeee100022968e52a1b31c60  (required)
     * @return UpdateCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCommentRequestBuilder updateComment(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateCommentRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateJobClassificationOptionsCall(String ID, String subresourceID, ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobJobClassificationData354103f196361000084489bcb281017f;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/jobClassification/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobClassificationOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateJobClassificationOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateJobClassificationOptions(Async)");
        }

        // verify the required parameter 'changeJobJobClassificationData354103f196361000084489bcb281017f' is set
        if (changeJobJobClassificationData354103f196361000084489bcb281017f == null) {
            throw new ApiException("Missing the required parameter 'changeJobJobClassificationData354103f196361000084489bcb281017f' when calling updateJobClassificationOptions(Async)");
        }

        return updateJobClassificationOptionsCall(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f, _callback);

    }


    private ApiResponse<ChangeJobJobClassificationData354103f196361000084489bcb281017f> updateJobClassificationOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f) throws ApiException {
        okhttp3.Call localVarCall = updateJobClassificationOptionsValidateBeforeCall(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f, null);
        Type localVarReturnType = new TypeToken<ChangeJobJobClassificationData354103f196361000084489bcb281017f>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateJobClassificationOptionsAsync(String ID, String subresourceID, ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f, final ApiCallback<ChangeJobJobClassificationData354103f196361000084489bcb281017f> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobClassificationOptionsValidateBeforeCall(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobJobClassificationData354103f196361000084489bcb281017f>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateJobClassificationOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private List<ChangeJobAdditionalJobClassificationData27ec818d10d0100003600115b5200102> additionalJobClassifications;

        private UpdateJobClassificationOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set additionalJobClassifications
         * @param additionalJobClassifications Additional Job Classifications Proposed By Staffing Event (optional)
         * @return UpdateJobClassificationOptionsRequestBuilder
         */
        public UpdateJobClassificationOptionsRequestBuilder additionalJobClassifications(List<ChangeJobAdditionalJobClassificationData27ec818d10d0100003600115b5200102> additionalJobClassifications) {
            this.additionalJobClassifications = additionalJobClassifications;
            return this;
        }
        
        /**
         * Build call for updateJobClassificationOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f = buildBodyParams();
            return updateJobClassificationOptionsCall(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f, _callback);
        }

        private ChangeJobJobClassificationData354103f196361000084489bcb281017f buildBodyParams() {
            ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f = new ChangeJobJobClassificationData354103f196361000084489bcb281017f();
            return changeJobJobClassificationData354103f196361000084489bcb281017f;
        }

        /**
         * Execute updateJobClassificationOptions request
         * @return ChangeJobJobClassificationData354103f196361000084489bcb281017f
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobJobClassificationData354103f196361000084489bcb281017f execute() throws ApiException {
            ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f = buildBodyParams();
            ApiResponse<ChangeJobJobClassificationData354103f196361000084489bcb281017f> localVarResp = updateJobClassificationOptionsWithHttpInfo(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateJobClassificationOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobJobClassificationData354103f196361000084489bcb281017f&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobJobClassificationData354103f196361000084489bcb281017f> executeWithHttpInfo() throws ApiException {
            ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f = buildBodyParams();
            return updateJobClassificationOptionsWithHttpInfo(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f);
        }

        /**
         * Execute updateJobClassificationOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobJobClassificationData354103f196361000084489bcb281017f> _callback) throws ApiException {
            ChangeJobJobClassificationData354103f196361000084489bcb281017f changeJobJobClassificationData354103f196361000084489bcb281017f = buildBodyParams();
            return updateJobClassificationOptionsAsync(ID, subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f, _callback);
        }
    }

    /**
     * Partially updates the jobClassification options for the specified change job ID.
     * Partially updates the job classifications for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobClassification/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: additionalJobClassifications[ {id} ].   To retrieve an additionalJobClassifications ID, call the GET /values/jobChangesGroup/jobClassifications prompt endpoint with the location and/or staffingEvent query parameter. It returns HREF links to job classifications by location for the staffing event. It returns an empty result if both location and staffingEvent are not specified. You can filter the results by effectiveDate. By default, it returns job classifications on the current date.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobJobClassificationData354103f196361000084489bcb281017f  (required)
     * @return UpdateJobClassificationOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobClassificationOptionsRequestBuilder updateJobClassificationOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateJobClassificationOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateJobProfileOptionsCall(String ID, String subresourceID, ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobJobProfileData3db8095ffa18100013f019a27a1f0115;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/jobProfile/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobProfileOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateJobProfileOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateJobProfileOptions(Async)");
        }

        // verify the required parameter 'changeJobJobProfileData3db8095ffa18100013f019a27a1f0115' is set
        if (changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 == null) {
            throw new ApiException("Missing the required parameter 'changeJobJobProfileData3db8095ffa18100013f019a27a1f0115' when calling updateJobProfileOptions(Async)");
        }

        return updateJobProfileOptionsCall(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, _callback);

    }


    private ApiResponse<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> updateJobProfileOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115) throws ApiException {
        okhttp3.Call localVarCall = updateJobProfileOptionsValidateBeforeCall(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, null);
        Type localVarReturnType = new TypeToken<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateJobProfileOptionsAsync(String ID, String subresourceID, ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, final ApiCallback<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobProfileOptionsValidateBeforeCall(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateJobProfileOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private JobProfile3db8095ffa18100013f019afc6d30116 jobProfile;
        private String jobTitle;

        private UpdateJobProfileOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set jobProfile
         * @param jobProfile  (optional)
         * @return UpdateJobProfileOptionsRequestBuilder
         */
        public UpdateJobProfileOptionsRequestBuilder jobProfile(JobProfile3db8095ffa18100013f019afc6d30116 jobProfile) {
            this.jobProfile = jobProfile;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The new job title for the worker as of the effective date. (optional)
         * @return UpdateJobProfileOptionsRequestBuilder
         */
        public UpdateJobProfileOptionsRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Build call for updateJobProfileOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 = buildBodyParams();
            return updateJobProfileOptionsCall(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, _callback);
        }

        private ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 buildBodyParams() {
            ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 = new ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115();
            return changeJobJobProfileData3db8095ffa18100013f019a27a1f0115;
        }

        /**
         * Execute updateJobProfileOptions request
         * @return ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 execute() throws ApiException {
            ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 = buildBodyParams();
            ApiResponse<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> localVarResp = updateJobProfileOptionsWithHttpInfo(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateJobProfileOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> executeWithHttpInfo() throws ApiException {
            ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 = buildBodyParams();
            return updateJobProfileOptionsWithHttpInfo(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115);
        }

        /**
         * Execute updateJobProfileOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> _callback) throws ApiException {
            ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 = buildBodyParams();
            return updateJobProfileOptionsAsync(ID, subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, _callback);
        }
    }

    /**
     * Partially updates the jobProfile options for the specified change job ID.
     * Partially updates the job profile options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobProfile/{subResourceID} to get the existing data to update.  The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: jobProfile{id}  To retrieve a jobProfile ID, call the GET /values/jobChangesGroup/jobProfiles prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to the job profiles by the prompt category. If you don&#39;t specify the staffingEvent parameter, it returns all job profiles, regardless of their categories. You can also filter the job profiles by the effectiveDate query parameter. The default is the current date.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobJobProfileData3db8095ffa18100013f019a27a1f0115  (required)
     * @return UpdateJobProfileOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobProfileOptionsRequestBuilder updateJobProfileOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateJobProfileOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateMoveTeamOptionsCall(String ID, String subresourceID, ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/moveTeam/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMoveTeamOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateMoveTeamOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateMoveTeamOptions(Async)");
        }

        // verify the required parameter 'changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146' is set
        if (changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 == null) {
            throw new ApiException("Missing the required parameter 'changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146' when calling updateMoveTeamOptions(Async)");
        }

        return updateMoveTeamOptionsCall(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, _callback);

    }


    private ApiResponse<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> updateMoveTeamOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146) throws ApiException {
        okhttp3.Call localVarCall = updateMoveTeamOptionsValidateBeforeCall(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, null);
        Type localVarReturnType = new TypeToken<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMoveTeamOptionsAsync(String ID, String subresourceID, ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, final ApiCallback<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMoveTeamOptionsValidateBeforeCall(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMoveTeamOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Boolean moveTeam;

        private UpdateMoveTeamOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set moveTeam
         * @param moveTeam Returns a boolean that indicates whether teams reporting to the Manager moved with them during the Change Job Event. (optional)
         * @return UpdateMoveTeamOptionsRequestBuilder
         */
        public UpdateMoveTeamOptionsRequestBuilder moveTeam(Boolean moveTeam) {
            this.moveTeam = moveTeam;
            return this;
        }
        
        /**
         * Build call for updateMoveTeamOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 = buildBodyParams();
            return updateMoveTeamOptionsCall(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, _callback);
        }

        private ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 buildBodyParams() {
            ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 = new ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146();
            return changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146;
        }

        /**
         * Execute updateMoveTeamOptions request
         * @return ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 execute() throws ApiException {
            ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 = buildBodyParams();
            ApiResponse<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> localVarResp = updateMoveTeamOptionsWithHttpInfo(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMoveTeamOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> executeWithHttpInfo() throws ApiException {
            ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 = buildBodyParams();
            return updateMoveTeamOptionsWithHttpInfo(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146);
        }

        /**
         * Execute updateMoveTeamOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> _callback) throws ApiException {
            ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 = buildBodyParams();
            return updateMoveTeamOptionsAsync(ID, subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, _callback);
        }
    }

    /**
     * Partially updates the moveTeam options for the specified change job ID.
     * Partially updates the moveTeam options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/moveTeam/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Move Manager&#39;s Team  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146  (required)
     * @return UpdateMoveTeamOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMoveTeamOptionsRequestBuilder updateMoveTeamOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateMoveTeamOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateOpeningOptionsCall(String ID, String subresourceID, ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobOpeningData97af9049a5fd10001c4888d654170000;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/opening/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOpeningOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateOpeningOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateOpeningOptions(Async)");
        }

        // verify the required parameter 'changeJobOpeningData97af9049a5fd10001c4888d654170000' is set
        if (changeJobOpeningData97af9049a5fd10001c4888d654170000 == null) {
            throw new ApiException("Missing the required parameter 'changeJobOpeningData97af9049a5fd10001c4888d654170000' when calling updateOpeningOptions(Async)");
        }

        return updateOpeningOptionsCall(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000, _callback);

    }


    private ApiResponse<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> updateOpeningOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000) throws ApiException {
        okhttp3.Call localVarCall = updateOpeningOptionsValidateBeforeCall(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000, null);
        Type localVarReturnType = new TypeToken<ChangeJobOpeningData97af9049a5fd10001c4888d654170000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOpeningOptionsAsync(String ID, String subresourceID, ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000, final ApiCallback<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOpeningOptionsValidateBeforeCall(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobOpeningData97af9049a5fd10001c4888d654170000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOpeningOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private HeadcountOption97af9049a5fd10001c48896fbde30000 headcountOption;
        private Boolean openingAvailableForOverlap;
        private String id;
        private String descriptor;

        private UpdateOpeningOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set headcountOption
         * @param headcountOption  (optional)
         * @return UpdateOpeningOptionsRequestBuilder
         */
        public UpdateOpeningOptionsRequestBuilder headcountOption(HeadcountOption97af9049a5fd10001c48896fbde30000 headcountOption) {
            this.headcountOption = headcountOption;
            return this;
        }
        
        /**
         * Set openingAvailableForOverlap
         * @param openingAvailableForOverlap Returns true if the value for &#39;Available for job overlap&#39; box is checked (optional)
         * @return UpdateOpeningOptionsRequestBuilder
         */
        public UpdateOpeningOptionsRequestBuilder openingAvailableForOverlap(Boolean openingAvailableForOverlap) {
            this.openingAvailableForOverlap = openingAvailableForOverlap;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateOpeningOptionsRequestBuilder
         */
        public UpdateOpeningOptionsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdateOpeningOptionsRequestBuilder
         */
        public UpdateOpeningOptionsRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for updateOpeningOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000 = buildBodyParams();
            return updateOpeningOptionsCall(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000, _callback);
        }

        private ChangeJobOpeningData97af9049a5fd10001c4888d654170000 buildBodyParams() {
            ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000 = new ChangeJobOpeningData97af9049a5fd10001c4888d654170000();
            return changeJobOpeningData97af9049a5fd10001c4888d654170000;
        }

        /**
         * Execute updateOpeningOptions request
         * @return ChangeJobOpeningData97af9049a5fd10001c4888d654170000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobOpeningData97af9049a5fd10001c4888d654170000 execute() throws ApiException {
            ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000 = buildBodyParams();
            ApiResponse<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> localVarResp = updateOpeningOptionsWithHttpInfo(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOpeningOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobOpeningData97af9049a5fd10001c4888d654170000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> executeWithHttpInfo() throws ApiException {
            ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000 = buildBodyParams();
            return updateOpeningOptionsWithHttpInfo(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000);
        }

        /**
         * Execute updateOpeningOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> _callback) throws ApiException {
            ChangeJobOpeningData97af9049a5fd10001c4888d654170000 changeJobOpeningData97af9049a5fd10001c4888d654170000 = buildBodyParams();
            return updateOpeningOptionsAsync(ID, subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000, _callback);
        }
    }

    /**
     * Partially updates the opening options for the specified change job ID.
     * Partially updates the opening options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/opening/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: headcountOption{id}   To retrieve a headcountOption ID, call the GET /values/jobChangesGroup/headcountOptions prompt endpoint, which takes the job change ID as the staffingEvent query parameter. By default, it returns all headcount options.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobOpeningData97af9049a5fd10001c4888d654170000  (required)
     * @return UpdateOpeningOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOpeningOptionsRequestBuilder updateOpeningOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateOpeningOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updatePositionOptionsCall(String ID, String subresourceID, ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeJobPositionDataDfc4e58f7308100018bd1c459f435221;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/position/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePositionOptionsValidateBeforeCall(String ID, String subresourceID, ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updatePositionOptions(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updatePositionOptions(Async)");
        }

        // verify the required parameter 'changeJobPositionDataDfc4e58f7308100018bd1c459f435221' is set
        if (changeJobPositionDataDfc4e58f7308100018bd1c459f435221 == null) {
            throw new ApiException("Missing the required parameter 'changeJobPositionDataDfc4e58f7308100018bd1c459f435221' when calling updatePositionOptions(Async)");
        }

        return updatePositionOptionsCall(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221, _callback);

    }


    private ApiResponse<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> updatePositionOptionsWithHttpInfo(String ID, String subresourceID, ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221) throws ApiException {
        okhttp3.Call localVarCall = updatePositionOptionsValidateBeforeCall(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221, null);
        Type localVarReturnType = new TypeToken<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePositionOptionsAsync(String ID, String subresourceID, ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221, final ApiCallback<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePositionOptionsValidateBeforeCall(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221, _callback);
        Type localVarReturnType = new TypeToken<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePositionOptionsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Boolean createPosition;
        private Boolean availableForOverlap;
        private PositionDfc4e58f730810001ad60369c23452d1 position;
        private Boolean closePosition;
        private JobRequisitionDfc4e58f730810001ad60325d9bc52cf jobRequisition;
        private String id;
        private String descriptor;

        private UpdatePositionOptionsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set createPosition
         * @param createPosition Returns true if the position is being created. (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder createPosition(Boolean createPosition) {
            this.createPosition = createPosition;
            return this;
        }
        
        /**
         * Set availableForOverlap
         * @param availableForOverlap Returns true if the value for &#39;Available for job overlap&#39; box is checked (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder availableForOverlap(Boolean availableForOverlap) {
            this.availableForOverlap = availableForOverlap;
            return this;
        }
        
        /**
         * Set position
         * @param position  (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder position(PositionDfc4e58f730810001ad60369c23452d1 position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set closePosition
         * @param closePosition Returns true if the position is being closed. (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder closePosition(Boolean closePosition) {
            this.closePosition = closePosition;
            return this;
        }
        
        /**
         * Set jobRequisition
         * @param jobRequisition  (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder jobRequisition(JobRequisitionDfc4e58f730810001ad60325d9bc52cf jobRequisition) {
            this.jobRequisition = jobRequisition;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdatePositionOptionsRequestBuilder
         */
        public UpdatePositionOptionsRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for updatePositionOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221 = buildBodyParams();
            return updatePositionOptionsCall(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221, _callback);
        }

        private ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 buildBodyParams() {
            ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221 = new ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221();
            return changeJobPositionDataDfc4e58f7308100018bd1c459f435221;
        }

        /**
         * Execute updatePositionOptions request
         * @return ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 execute() throws ApiException {
            ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221 = buildBodyParams();
            ApiResponse<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> localVarResp = updatePositionOptionsWithHttpInfo(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePositionOptions request with HTTP info returned
         * @return ApiResponse&lt;ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> executeWithHttpInfo() throws ApiException {
            ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221 = buildBodyParams();
            return updatePositionOptionsWithHttpInfo(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221);
        }

        /**
         * Execute updatePositionOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> _callback) throws ApiException {
            ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 changeJobPositionDataDfc4e58f7308100018bd1c459f435221 = buildBodyParams();
            return updatePositionOptionsAsync(ID, subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221, _callback);
        }
    }

    /**
     * Partially updates the position options for the specified change job ID.
     * Partially updates the position options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: position{id}, createPosition, closePosition, availableForOverlap  To retrieve a position ID, call the GET /values/jobChangesGroup/proposedPosition prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to proposed positions based on staffing event for contingent workers. You can filter the results by effectiveDate. By default, it returns all proposed positions on current date.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param changeJobPositionDataDfc4e58f7308100018bd1c459f435221  (required)
     * @return UpdatePositionOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePositionOptionsRequestBuilder updatePositionOptions(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdatePositionOptionsRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateStartDetailsCall(String ID, String subresourceID, JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020;

        // create path and map variables
        String localVarPath = "/jobChanges/{ID}/startDetails/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStartDetailsValidateBeforeCall(String ID, String subresourceID, JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateStartDetails(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateStartDetails(Async)");
        }

        // verify the required parameter 'jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020' is set
        if (jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 == null) {
            throw new ApiException("Missing the required parameter 'jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020' when calling updateStartDetails(Async)");
        }

        return updateStartDetailsCall(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, _callback);

    }


    private ApiResponse<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> updateStartDetailsWithHttpInfo(String ID, String subresourceID, JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020) throws ApiException {
        okhttp3.Call localVarCall = updateStartDetailsValidateBeforeCall(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, null);
        Type localVarReturnType = new TypeToken<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStartDetailsAsync(String ID, String subresourceID, JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, final ApiCallback<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStartDetailsValidateBeforeCall(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, _callback);
        Type localVarReturnType = new TypeToken<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStartDetailsRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private Worker271bbd673582100010110b9f9a6d99e1 worker;
        private Boolean useNextPayPeriod;
        private Template2b1b95dfe4af100009f30dc769a31686 template;
        private Job35b8f199c29410002508ffd7ad6101f3 job;
        private LocalDate date;
        private Location6da81665c26510001fc6b1d42fae5f7b location;
        private Reason6da81665c26510001f34d0a154765e9b reason;
        private SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8 supervisoryOrganization;
        private String id;
        private String descriptor;

        private UpdateStartDetailsRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set worker
         * @param worker  (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder worker(Worker271bbd673582100010110b9f9a6d99e1 worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Set useNextPayPeriod
         * @param useNextPayPeriod Next Pay Period? (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder useNextPayPeriod(Boolean useNextPayPeriod) {
            this.useNextPayPeriod = useNextPayPeriod;
            return this;
        }
        
        /**
         * Set template
         * @param template  (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder template(Template2b1b95dfe4af100009f30dc769a31686 template) {
            this.template = template;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder job(Job35b8f199c29410002508ffd7ad6101f3 job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set date
         * @param date The date this business process takes effect. (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder location(Location6da81665c26510001fc6b1d42fae5f7b location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set reason
         * @param reason  (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder reason(Reason6da81665c26510001f34d0a154765e9b reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set supervisoryOrganization
         * @param supervisoryOrganization  (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder supervisoryOrganization(SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8 supervisoryOrganization) {
            this.supervisoryOrganization = supervisoryOrganization;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdateStartDetailsRequestBuilder
         */
        public UpdateStartDetailsRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for updateStartDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 = buildBodyParams();
            return updateStartDetailsCall(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, _callback);
        }

        private JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 buildBodyParams() {
            JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 = new JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020();
            return jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020;
        }

        /**
         * Execute updateStartDetails request
         * @return JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 execute() throws ApiException {
            JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 = buildBodyParams();
            ApiResponse<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> localVarResp = updateStartDetailsWithHttpInfo(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStartDetails request with HTTP info returned
         * @return ApiResponse&lt;JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> executeWithHttpInfo() throws ApiException {
            JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 = buildBodyParams();
            return updateStartDetailsWithHttpInfo(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020);
        }

        /**
         * Execute updateStartDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> _callback) throws ApiException {
            JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 = buildBodyParams();
            return updateStartDetailsAsync(ID, subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, _callback);
        }
    }

    /**
     * Partially updates the startDetails options for the specified change job ID.
     * Partially updates the start details for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: date, reason{id}.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020  (required)
     * @return UpdateStartDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStartDetailsRequestBuilder updateStartDetails(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateStartDetailsRequestBuilder(ID, subresourceID);
    }
}
